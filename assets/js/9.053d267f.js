(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{651:function(s,e,t){s.exports=t.p+"assets/img/c8aa2f2dde50973.6369a2c1.png"},652:function(s,e,t){s.exports=t.p+"assets/img/337ebe0ed8d0bb8.2ba7eb53.png"},653:function(s,e,t){s.exports=t.p+"assets/img/BD7EE2EF-EFE3-404F-AC33-2B480797FE4E.be4a0092.png"},654:function(s,e,t){s.exports=t.p+"assets/img/6bf7ceddc852371.3185f40a.png"},655:function(s,e,t){s.exports=t.p+"assets/img/5270ab20cec963d.c74484d7.png"},656:function(s,e,t){s.exports=t.p+"assets/img/301D0380-BCC2-4F1D-B679-5481801103D9.aab64f9c.png"},657:function(s,e,t){s.exports=t.p+"assets/img/1557638701414.e1fc6c32.png"},658:function(s,e,t){s.exports=t.p+"assets/img/1557638555701.8488f8ef.png"},659:function(s,e,t){s.exports=t.p+"assets/img/C96ACA73-17A3-4498-9629-2D4931EA0D67.a8b666f0.png"},660:function(s,e,t){s.exports=t.p+"assets/img/18126975-DB12-4B9E-B653-D921C7BFFA70.9b612086.png"},800:function(s,e,t){"use strict";t.r(e);var a=t(11),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" Docker")]),s._v(" "),a("h2",{attrs:{id:"docker-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-概述"}},[s._v("#")]),s._v(" Docker 概述")]),s._v(" "),a("h3",{attrs:{id:"docker-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么"}},[s._v("#")]),s._v(" Docker 是什么")]),s._v(" "),a("p",[s._v("Docker 使用 Google 公司推出的 "),a("strong",[s._v("Go")]),s._v(" 语言进行开发实现，基于 Linux 内核的 "),a("code",[s._v("cgroup")]),s._v("，"),a("code",[s._v("namespace")]),s._v("，以及 "),a("code",[s._v("AUFS")]),s._v(" 类的 "),a("code",[s._v("Union FS")]),s._v(" 等技术，对"),a("strong",[s._v("进程进行封装隔离")]),s._v("，属于操作系统层面的"),a("strong",[s._v("虚拟化技术")]),s._v("。由于"),a("strong",[s._v("隔离的进程独立于宿主和其它的隔离的进程")]),s._v("，因此也称其为 "),a("strong",[s._v("容器")]),s._v(" 。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。")]),s._v(" "),a("p",[s._v("下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:t(651),alt:"img"}}),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:t(652),alt:"img"}}),s._v(" "),a("h3",{attrs:{id:"docker-能干什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-能干什么"}},[s._v("#")]),s._v(" Docker 能干什么")]),s._v(" "),a("p",[s._v("传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。")]),s._v(" "),a("p",[s._v("Docker镜像的设计，使得Docker得以"),a("strong",[s._v("打破过去「程序即应用」的观念")]),s._v("。"),a("strong",[s._v("透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作")]),s._v("。其主要目标是“"),a("strong",[s._v("Build，Ship and Run Any App,Anywhere")]),s._v("”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。**解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。**软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。")]),s._v(" "),a("p",[a("strong",[s._v("开发/运维（DevOps）")]),s._v("：一次构建、随处运行")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("一致的运行环境")])]),s._v(" "),a("p",[s._v("应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("更快速的启动时间")])]),s._v(" "),a("p",[s._v("传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("持续交付和部署")])]),s._v(" "),a("p",[s._v("使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合"),a("strong",[s._v("持续集成")]),s._v("(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合"),a("strong",[s._v("持续部署")]),s._v("(Continuous Delivery/Deployment) 系统进行自动部署。而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("更轻松的迁移")])]),s._v(" "),a("p",[s._v("由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云（可使用 OpenStack 搭建），甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("更高效的计算资源利用")])]),s._v(" "),a("p",[s._v("Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，不需要进行硬件虚拟以及运行完整操作系统等额外开销，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("更便捷的升级和扩缩容")])]),s._v(" "),a("p",[s._v("随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。")])])]),s._v(" "),a("p",[s._v("对比传统虚拟机总结")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[s._v("特性")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("容器")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("虚拟机")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("启动")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("秒级")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("分钟级")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("硬盘使用")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("一般为 "),a("code",[s._v("MB")])]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("一般为 "),a("code",[s._v("GB")])])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("性能")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("接近原生")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("弱于")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("系统支持量")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("单机支持上千个容器")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("一般几十个")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:t(653),alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"docker-引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-引擎"}},[s._v("#")]),s._v(" Docker 引擎")]),s._v(" "),a("p",[s._v("Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。")]),s._v(" "),a("ul",[a("li",[s._v("一种服务器，它是一种称为"),a("strong",[s._v("守护进程并且长时间运行的程序")]),s._v("。")]),s._v(" "),a("li",[s._v("REST API 用于指定程序可以用来与守护进程通信的接口，并指示它做什么。")]),s._v(" "),a("li",[s._v("一个有命令行界面 (CLI) 工具的客户端。")])]),s._v(" "),a("p",[a("img",{attrs:{src:t(654),alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"docker-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-架构"}},[s._v("#")]),s._v(" Docker 架构")]),s._v(" "),a("ul",[a("li",[s._v("Docker 使用客户端 - 服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。")]),s._v(" "),a("li",[s._v("Docker 容器通过 Docker 镜像来创建。")]),s._v(" "),a("li",[s._v("容器与镜像的关系类似于面向对象编程中的对象与类。")])]),s._v(" "),a("p",[a("img",{attrs:{src:t(655),alt:"img"}})]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[s._v("标题")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("镜像(Images)")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("Docker 镜像是用于创建 Docker 容器的模板。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("容器(Container)")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("容器是独立运行的一个或一组应用。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("客户端(Client)")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("Docker 客户端通过命令行或者其他工具使用 Docker API ("),a("a",{attrs:{href:"http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vcmVmZXJlbmNlL2FwaS9kb2NrZXJfcmVtb3RlX2FwaQ==",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.docker.com/reference/api/docker_remote_api"),a("OutboundLink")],1),s._v(") 与 Docker 的守护进程通信。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("主机(Host)")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("仓库(Registry)")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub("),a("a",{attrs:{href:"http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://hub.docker.com"),a("OutboundLink")],1),s._v(") 提供了庞大的镜像集合供使用。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("Docker Machine")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。")])])])]),s._v(" "),a("h3",{attrs:{id:"docker-基本组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本组成"}},[s._v("#")]),s._v(" Docker 基本组成")]),s._v(" "),a("p",[s._v("Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就就是 image 镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("镜像")]),s._v("：Docker 镜像（Image）就是一个"),a("strong",[s._v("只读的模板")]),s._v("。镜像可以"),a("strong",[s._v("用来创建 Docker 容器")]),s._v("，一个镜像可以创建很多容器。")]),s._v(" "),a("li",[a("strong",[s._v("容器")]),s._v("：Docker 利用容器（Container）独立运行的一个或一组应用。"),a("strong",[s._v("容器是用镜像创建的运行实例")]),s._v("。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。"),a("strong",[s._v("可以把容器看做是一个简易版的 Linux 环境")]),s._v("（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。")]),s._v(" "),a("li",[a("strong",[s._v("仓库")]),s._v("：仓库（Repository）是"),a("strong",[s._v("集中存放镜像文件的场所")]),s._v("。仓库（Repository）和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub(https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等")])]),s._v(" "),a("h3",{attrs:{id:"docker-的底层原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-的底层原理"}},[s._v("#")]),s._v(" Docker 的底层原理")]),s._v(" "),a("ul",[a("li",[s._v("Docker如何工作？")])]),s._v(" "),a("p",[s._v("Docker是一个Client-Server 结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器是一个运行时环境，就是我们前面说到的集装箱。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(656),alt:"img"}})]),s._v(" "),a("ul",[a("li",[s._v("为什么Docker比较比VM快？")])]),s._v(" "),a("p",[s._v("虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使"),a("strong",[s._v("应用程序，操作系统和硬件")]),s._v("三者之间的逻辑不变。虚拟机的缺点：资源占用多、冗余步骤多、启动慢。")]),s._v(" "),a("p",[s._v("由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(657),alt:"1557638701414"}})]),s._v(" "),a("p",[s._v("比较 "),a("strong",[s._v("Docker 和传统虚拟化方式的不同之处")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("传统虚拟机技术是"),a("strong",[s._v("虚拟出一套硬件")]),s._v("后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；Docker有着比虚拟机更少的抽象层。由于"),a("strong",[s._v("Docker不需要Hypervisor实现硬件资源虚拟化")]),s._v("，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上Docker将会在效率上有明显优势。")]),s._v(" "),a("li",[s._v("Docker"),a("strong",[s._v("利用的是宿主机的内核")]),s._v("，而不需要Guest OS。因此当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核等比较费时费资源的过程。然而当新建一个虚拟机时，虚拟机软件需要加载Guest OS，返个新建过程是分钟级别的。而Docker由于直接利用宿主机的操作系统，则省略了返个过程，因此新建一个Docker容器只需要几秒钟。")]),s._v(" "),a("li",[s._v("每个容器之间"),a("strong",[s._v("互相隔离")]),s._v("，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。")])]),s._v(" "),a("p",[a("img",{attrs:{src:t(658),alt:"1557638555701"}})]),s._v(" "),a("h2",{attrs:{id:"docker-镜像原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像原理"}},[s._v("#")]),s._v(" Docker 镜像原理")]),s._v(" "),a("h3",{attrs:{id:"unionfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unionfs"}},[s._v("#")]),s._v(" UnionFS")]),s._v(" "),a("p",[s._v("UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持"),a("strong",[s._v("对文件系统的修改作为一次提交来一层层的叠加")]),s._v("，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。UnionFS 是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载。")]),s._v(" "),a("p",[s._v("特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。")]),s._v(" "),a("h3",{attrs:{id:"docker分层镜像-镜像加载原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker分层镜像-镜像加载原理"}},[s._v("#")]),s._v(" Docker分层镜像&镜像加载原理")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("bootfs")]),s._v("(boot file system)主要包含"),a("strong",[s._v("bootloader和kernel")]),s._v(", bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("rootfs")]),s._v(" (root file system) ，在bootfs之上rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。")])]),s._v(" "),a("li",[a("p",[s._v("为什么 Docker 镜像要采用这种"),a("strong",[s._v("分层结构")]),s._v("呢——"),a("strong",[s._v("共享资源")])]),s._v(" "),a("p",[s._v("比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:t(659),alt:"img"}})]),s._v(" "),a("blockquote",[a("p",[s._v("平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？")]),s._v(" "),a("p",[s._v("对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。")]),s._v(" "),a("p",[s._v("平时我们安装进虚拟机的Tomcat都是几十M，为什么Docker这里几百M？？")]),s._v(" "),a("p",[s._v("分层结构，可能包括了Linux kernel / Ubuntu / JDK / Tomcat。")])]),s._v(" "),a("h3",{attrs:{id:"docker镜像的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像的特点"}},[s._v("#")]),s._v(" Docker镜像的特点")]),s._v(" "),a("p",[s._v("Docker镜像都是"),a("strong",[s._v("只读")]),s._v("的。当容器启动时，"),a("strong",[s._v("一个新的可写层被加载到镜像的顶部")]),s._v("。这一层通常被称作“"),a("strong",[s._v("容器层")]),s._v("”，“容器层”之下的都叫“镜像层”。")]),s._v(" "),a("h3",{attrs:{id:"docker镜像commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像commit"}},[s._v("#")]),s._v(" Docker镜像Commit")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v('docker commit -m "提交的描述信息” -a “作者” 容器ID 要创建的目标镜像名:[标签名]')])]),s._v(" "),a("p",[s._v("提交容器副本使之成为一个新的镜像")])]),s._v(" "),a("li",[a("p",[s._v("案例演示")]),s._v(" "),a("ol",[a("li",[s._v("从Hub上下载tomcat镜像到本地并成功运行"),a("code",[s._v("docker run -it -p 8080:8080 tomcat")])]),s._v(" "),a("li",[s._v("故意删除上一步镜像生产tomcat容器的文档docs（需要启动后进入）")]),s._v(" "),a("li",[s._v("也即当前的tomcat运行实例是一个没有文档内容的容器，以它为模板commit一个没有doc的tomcat新镜像")]),s._v(" "),a("li",[s._v("启动我们的新镜像并和原来的对比")])])])]),s._v(" "),a("h2",{attrs:{id:"docker-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装"}},[s._v("#")]),s._v(" Docker 安装")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("查看"),a("a",{attrs:{href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网文档"),a("OutboundLink")],1),s._v("，有各种系统的安装介绍。")])]),s._v(" "),a("li",[a("p",[s._v("配置镜像加速，在"),a("a",{attrs:{href:"https://cr.console.aliyun.com/cn-hangzhou/instances/repositories",target:"_blank",rel:"noopener noreferrer"}},[s._v("阿里云的容器镜像服务"),a("OutboundLink")],1),s._v("中镜像加速器按步骤配置即可。")])]),s._v(" "),a("li",[a("p",[s._v("为解决每次执行 docker 命令都需要 sudo，可以将当前用户添加到 docker 组中")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("groupadd")]),s._v(" docker "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一般安装 docker 后都会自动添加该组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" gpasswd -a "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("}")]),s._v(" docker "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加当前用户到 docker 组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" docker restart "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启 docker 服务")]),s._v("\nnewgrp - docker "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 刷新 docker 成员")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"docker-帮助命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-帮助命令"}},[s._v("#")]),s._v(" Docker 帮助命令")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker version")]),s._v("：docker的版本等信息")]),s._v(" "),a("li",[a("code",[s._v("docker info")]),s._v("：docker详细信息")]),s._v(" "),a("li",[a("code",[s._v("docker --help")]),s._v("："),a("strong",[s._v("帮助")])])]),s._v(" "),a("h2",{attrs:{id:"docker-镜像命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像命令"}},[s._v("#")]),s._v(" Docker 镜像命令")]),s._v(" "),a("h3",{attrs:{id:"列出镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列出镜像"}},[s._v("#")]),s._v(" 列出镜像")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("docker images [options]")]),s._v("：列出"),a("strong",[s._v("本地主机")]),s._v("上的镜像")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("ls")]),s._v("：可省略，简写")]),s._v(" "),a("li",[a("code",[s._v("-a")]),s._v("："),a("strong",[s._v("列出本地所有的镜像（含中间映像层）")])]),s._v(" "),a("li",[a("code",[s._v("-q")]),s._v("："),a("strong",[s._v("静默")]),s._v("模式，"),a("strong",[s._v("只显示镜像ID")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("--digests")]),s._v("：显示镜像的摘要信息")]),s._v(" "),a("li",[a("code",[s._v("--no-trunc")]),s._v("：显示完整的镜像信息")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nREPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\nredis                latest              5f515359c7f8        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("183")]),s._v(" MB\nnginx                latest              05a60462f8ba        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("181")]),s._v(" MB\nmongo                "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.2")]),s._v("                 fe9198c04d62        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("342")]),s._v(" MB\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("              00285df0df87        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("342")]),s._v(" MB\nubuntu               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.04")]),s._v("               f753707788c5        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(" MB\nubuntu               latest              f753707788c5        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(" MB\nubuntu               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.04")]),s._v("               1e0c3dd64ccd        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("188")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("REPOSITORY：表示镜像的仓库名；TAG：镜像的标签；IMAGE ID：镜像ID；CREATED：镜像创建时间；SIZE：镜像大小")])])]),s._v(" "),a("h3",{attrs:{id:"搜索镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搜索镜像"}},[s._v("#")]),s._v(" 搜索镜像")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker search [OPTIONS] 镜像名字")]),s._v("：从https://hub.docker.com来查找镜像的！")]),s._v(" "),a("li",[a("code",[s._v("--no-trunc")]),s._v(" : 显示完整的镜像描述\n"),a("ul",[a("li",[a("code",[s._v("-s")]),s._v(" : "),a("strong",[s._v("列出收藏数不小于指定值的镜像")]),s._v("，star缩写")]),s._v(" "),a("li",[a("code",[s._v("--automated")]),s._v(" : 只列出 automated build类型的镜像；")])])])]),s._v(" "),a("h3",{attrs:{id:"拉取镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像"}},[s._v("#")]),s._v(" 拉取镜像")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]")]),s._v("："),a("strong",[s._v("下载镜像")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("镜像仓库地址：")]),s._v(" 地址的格式一般是 "),a("code",[s._v("<域名/IP>[:端口号]")]),s._v("。默认地址是 Docker Hub。")]),s._v(" "),a("li",[a("strong",[s._v("仓库名：")]),s._v(" 如之前所说，这里的仓库名是两段式名称，即 "),a("code",[s._v("<用户名>/<软件名>")]),s._v("。对于 Docker Hub，如果不给出用户名，则默认为 "),a("code",[s._v("library")]),s._v("，也就是官方镜像。")])])])]),s._v(" "),a("h3",{attrs:{id:"删除镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像"}},[s._v("#")]),s._v(" 删除镜像")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("docker image rm [选项] <镜像1> [<镜像2> ...]")]),s._v("："),a("strong",[s._v("删除镜像")]),s._v("，"),a("code",[s._v("-f")]),s._v("为强制删除")]),s._v(" "),a("p",[s._v("其中，"),a("code",[s._v("<镜像>")]),s._v(" 可以是 "),a("code",[s._v("镜像短 ID")]),s._v("（截取长 ID 首部即可）、"),a("code",[s._v("镜像长 ID")]),s._v("、"),a("code",[s._v("镜像名")]),s._v(" 或者 "),a("code",[s._v("镜像摘要")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker rmi -f 镜像ID")]),s._v("：删除单个，不写tag默认为latest")]),s._v(" "),a("li",[a("code",[s._v("docker rmi -f 镜像名1:TAG 镜像名2:TAG")]),s._v("：删除多个")]),s._v(" "),a("li",[a("code",[s._v("docker rmi -f $(docker images -qa)")]),s._v("：删除全部")])])]),s._v(" "),a("li",[a("p",[s._v("用 "),a("code",[s._v("docker image ls")]),s._v(" 命令来配合")]),s._v(" "),a("p",[s._v("像其它可以承接多个实体的命令一样，可以使用 "),a("code",[s._v("docker image ls -q")]),s._v(" 来配合使用 "),a("code",[s._v("docker image rm")]),s._v("，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。比如，我们需要删除所有仓库名为 "),a("code",[s._v("redis")]),s._v(" 的镜像：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -q redis"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("或者删除所有在 "),a("code",[s._v("mongo:3.2")]),s._v(" 之前的镜像：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -q -f "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("before")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mongo:3.2"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"镜像、容器等体积"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像、容器等体积"}},[s._v("#")]),s._v(" 镜像、容器等体积")]),s._v(" "),a("p",[s._v("如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，"),a("code",[s._v("ubuntu:16.04")]),s._v(" 镜像大小，在这里是 "),a("code",[s._v("127 MB")]),s._v("，但是在 Docker Hub 显示的却是 "),a("code",[s._v("50 MB")]),s._v("。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 "),a("code",[s._v("docker image ls")]),s._v(" 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。")]),s._v(" "),a("p",[s._v("另外一个需要注意的问题是，"),a("code",[s._v("docker image ls")]),s._v(" 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("docker system df")]),s._v("：查看镜像、容器、本地卷、构建缓存的空间")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker system "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".992GB             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".992GB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nContainers          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v(".82MB             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v(".82MB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nLocal Volumes       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("652")]),s._v(".2MB             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("652")]),s._v(".2MB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nBuild Cache                                                 0B                  0B\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"虚悬镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚悬镜像"}},[s._v("#")]),s._v(" 虚悬镜像")]),s._v(" "),a("p",[s._v("上面"),a("code",[s._v("iamges")]),s._v("的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 "),a("code",[s._v("none")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("              00285df0df87        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("342")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这个镜像原本是有镜像名和标签的，原来为 "),a("code",[s._v("mongo:3.2")]),s._v("，随着官方镜像维护，发布了新版本后，重新 "),a("code",[s._v("docker pull mongo:3.2")]),s._v(" 时，"),a("code",[s._v("mongo:3.2")]),s._v(" 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了"),a("code",[s._v("none")]),s._v("。除了 "),a("code",[s._v("docker pull")]),s._v(" 可能导致这种情况，"),a("code",[s._v("docker build")]),s._v(" 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 "),a("code",[s._v("none")]),s._v(" 的镜像。这类无标签镜像也被称为 "),a("strong",[s._v("虚悬镜像(dangling image)")]),s._v(" ，可以用下面的命令专门显示这类镜像：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("dangling")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("              00285df0df87        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("342")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image prune\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"中间层镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间层镜像"}},[s._v("#")]),s._v(" 中间层镜像")]),s._v(" "),a("p",[s._v("为了加速镜像构建、重复利用资源，Docker 会利用 "),a("strong",[s._v("中间层镜像")]),s._v("。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 "),a("code",[s._v("docker image ls")]),s._v(" 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 "),a("code",[s._v("-a")]),s._v(" 参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。")]),s._v(" "),a("h3",{attrs:{id:"列出部分镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列出部分镜像"}},[s._v("#")]),s._v(" 列出部分镜像")]),s._v(" "),a("p",[s._v("不加任何参数的情况下，"),a("code",[s._v("docker image ls")]),s._v(" 会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。"),a("code",[s._v("docker image ls")]),s._v(" 有好几个参数可以帮助做到这个事情。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("根据仓库名列出镜像")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" ubuntu\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.04")]),s._v("               f753707788c5        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(" MB\nubuntu              latest              f753707788c5        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(" MB\nubuntu              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.04")]),s._v("               1e0c3dd64ccd        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("188")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("列出特定的某个镜像，也就是说指定仓库名和标签")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" ubuntu:16.04\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.04")]),s._v("               f753707788c5        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" weeks ago         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("除此以外，"),a("code",[s._v("docker image ls")]),s._v(" 还支持强大的过滤器参数 "),a("code",[s._v("--filter")]),s._v("，或者简写 "),a("code",[s._v("-f")]),s._v("。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 "),a("code",[s._v("mongo:3.2")]),s._v(" 之后建立的镜像，可以用下面的命令")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("since")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mongo:3.2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nredis               latest              5f515359c7f8        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("183")]),s._v(" MB\nnginx               latest              05a60462f8ba        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" days ago          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("181")]),s._v(" MB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("想查看某个位置之前的镜像也可以，只需要把 "),a("code",[s._v("since")]),s._v(" 换成 "),a("code",[s._v("before")]),s._v(" 即可。")]),s._v(" "),a("p",[s._v("此外，如果镜像构建时，定义了 "),a("code",[s._v("LABEL")]),s._v("，还可以通过 "),a("code",[s._v("LABEL")]),s._v(" 来过滤。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("label")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("com.example.version"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"以特定格式显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以特定格式显示"}},[s._v("#")]),s._v(" 以特定格式显示")]),s._v(" "),a("p",[s._v("默认情况下，"),a("code",[s._v("docker image ls")]),s._v(" 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 "),a("code",[s._v("docker image ls")]),s._v(" 把所有的虚悬镜像的 ID 列出来，然后才可以交给 "),a("code",[s._v("docker image rm")]),s._v(" 命令作为参数来删除指定的这些镜像，这个时候就用到了 "),a("code",[s._v("-q")]),s._v(" 参数。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -q\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\n5f515359c7f8\n05a60462f8ba\nfe9198c04d62\n00285df0df87\nf753707788c5\nf753707788c5\n1e0c3dd64ccd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("code",[s._v("--filter")]),s._v(" 配合 "),a("code",[s._v("-q")]),s._v(" 产生出指定范围的 ID 列表，然后送给另一个 "),a("code",[s._v("docker")]),s._v(" 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。")]),s._v(" "),a("p",[s._v("另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 "),a("a",{attrs:{href:"http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9nb2h1Z28uaW8vdGVtcGxhdGVzL2dvLXRlbXBsYXRlcy8=",target:"_blank",rel:"noopener noreferrer"}},[s._v("Go 的模板语法"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("比如，下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" --format "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{{.ID}}: {{.Repository}}"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\n5f515359c7f8: redis\n05a60462f8ba: nginx\nfe9198c04d62: mongo\n00285df0df87: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nf753707788c5: ubuntu\nf753707788c5: ubuntu\n1e0c3dd64ccd: ubuntu\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" --format "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"table {{.ID}}'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),s._v("{{.Repository}}"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),s._v('{{.Tag}}"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出如下")]),s._v("\nIMAGE ID            REPOSITORY          TAG\n5f515359c7f8        redis               latest\n05a60462f8ba        nginx               latest\nfe9198c04d62        mongo               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.2")]),s._v("\n00285df0df87        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nf753707788c5        ubuntu              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.04")]),s._v("\nf753707788c5        ubuntu              latest\n1e0c3dd64ccd        ubuntu              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14.04")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"docker-容器命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器命令"}},[s._v("#")]),s._v(" Docker 容器命令")]),s._v(" "),a("h3",{attrs:{id:"查看容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看容器"}},[s._v("#")]),s._v(" 查看容器")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("列出当前所有正在运行的容器")]),s._v("："),a("code",[s._v("docker ps [OPTIONS]")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-a")]),s._v(" :列出当前"),a("strong",[s._v("所有正在运行的容器+历史上运行过的")])]),s._v(" "),a("li",[a("code",[s._v("-l")]),s._v(" :显示最近创建的容器。")]),s._v(" "),a("li",[a("code",[s._v("-n")]),s._v("：显示最近n个创建的容器。")]),s._v(" "),a("li",[a("code",[s._v("-q")]),s._v(" :"),a("strong",[s._v("静默")]),s._v("模式，"),a("strong",[s._v("只显示容器编号")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("--no-trunc")]),s._v(" :不截断输出。")])])]),s._v(" "),a("li",[a("p",[s._v("查看"),a("strong",[s._v("容器内运行的进程")]),s._v("："),a("code",[s._v("docker top 容器ID")])])]),s._v(" "),a("li",[a("p",[s._v("查看容器内部细节："),a("code",[s._v("docker inspect 容器ID")]),s._v("。以JSON格式来查看细节")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("进入正在运行的容器并以命令行交互")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker exec -it 容器ID [命令]")]),s._v("：在容器中打开新的终端，并且可以启动新的进程（利用命令）")]),s._v(" "),a("li",[a("code",[s._v("docker attach 容器ID")]),s._v("：直接重新进入容器启动命令的终端，不会启动新的进程")])])]),s._v(" "),a("li",[a("p",[s._v("查看容器"),a("strong",[s._v("日志")]),s._v("："),a("code",[s._v("docker logs -f -t --tail 容器ID")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-t")]),s._v(" 是加入时间戳")]),s._v(" "),a("li",[a("code",[s._v("-f")]),s._v(" 跟随最新的日志打印")]),s._v(" "),a("li",[a("code",[s._v("--tail")]),s._v(" 数字 显示最后多少条")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("从容器内拷贝文件到主机上（可反过来）")]),s._v("："),a("code",[s._v("docker cp 容器ID:容器内路径 目的主机路径")])])])]),s._v(" "),a("h3",{attrs:{id:"启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[s._v("#")]),s._v(" 启动容器")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("新建并启动容器")]),s._v("："),a("code",[s._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("--name=指定容器名称")]),s._v(": 为容器指定一个"),a("strong",[s._v("名称")]),s._v("；")]),s._v(" "),a("li",[a("code",[s._v("-d")]),s._v(": 后台运行容器，并返回容器ID，也即"),a("strong",[s._v("启动守护式容器")]),s._v("；")]),s._v(" "),a("li",[a("code",[s._v("-i")]),s._v("：以"),a("strong",[s._v("交互模式运行容器")]),s._v("，通常与 -t 同时使用；需指定或在容器内执行/bin/bash命令。")]),s._v(" "),a("li",[a("code",[s._v("-t")]),s._v("：为容器重新"),a("strong",[s._v("分配一个伪输入终端")]),s._v("，通常与 -i 同时使用；")]),s._v(" "),a("li",[a("code",[s._v("-P")]),s._v(": 随机端口映射；")]),s._v(" "),a("li",[a("code",[s._v("-p")]),s._v(": "),a("strong",[s._v("指定端口映射")]),s._v("，有以下四种格式\n"),a("ul",[a("li",[a("code",[s._v("ip:hostPort:containerPort")])]),s._v(" "),a("li",[a("code",[s._v("ip::containerPort")])]),s._v(" "),a("li",[a("code",[s._v("hostPort:containerPort")]),s._v("（常用）")]),s._v(" "),a("li",[a("code",[s._v("containerPort")])])])])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("启动守护式容器")]),s._v("："),a("code",[s._v("docker run -d 容器名")])]),s._v(" "),a("p",[s._v("问题：然后docker ps -a 进行查看, 会发现容器已经退出。因为Docker容器后台运行,就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。例如启动Ngixn，需要使用交互模式。Tomcat可以使用守护式启动。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("启动容器")]),s._v("："),a("code",[s._v("docker start 容器ID或者容器名")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("重启容器")]),s._v("："),a("code",[s._v("docker restart 容器ID或者容器名")])]),s._v(" "),a("p",[s._v("当利用 "),a("code",[s._v("docker run")]),s._v(" 来创建容器时，Docker 在后台运行的标准操作包括：")]),s._v(" "),a("ul",[a("li",[s._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),s._v(" "),a("li",[s._v("利用镜像创建并启动一个容器")]),s._v(" "),a("li",[s._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),s._v(" "),a("li",[s._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),s._v(" "),a("li",[s._v("从地址池配置一个 ip 地址给容器")]),s._v(" "),a("li",[s._v("执行用户指定的应用程序")]),s._v(" "),a("li",[s._v("执行完毕后容器被终止")])])])]),s._v(" "),a("h3",{attrs:{id:"终止容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止容器"}},[s._v("#")]),s._v(" 终止容器")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("退出容器")]),s._v("：")]),s._v(" "),a("li",[a("code",[s._v("exit")]),s._v("：容器停止退出\n"),a("ul",[a("li",[a("code",[s._v("Ctrl+D")])]),s._v(" "),a("li",[a("code",[s._v("Ctrl+P+Q")]),s._v("：容器不停止退出")])])]),s._v(" "),a("li",[s._v("停止容器（会有延迟）："),a("code",[s._v("docker stop 容器ID或者容器名")])]),s._v(" "),a("li",[s._v("强制立即停止容器："),a("code",[s._v("docker kill 容器ID或者容器名")])])]),s._v(" "),a("h3",{attrs:{id:"删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[s._v("#")]),s._v(" 删除容器")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("删除已停止的容器")]),s._v("："),a("code",[s._v("docker rm 容器ID")]),s._v("，"),a("code",[s._v("-f")]),s._v("为强制删除（终止容器并删除）")]),s._v(" "),a("li",[s._v("删除多个容器："),a("code",[s._v("docker rm -f $(docker ps -a -q)")]),s._v("或"),a("code",[s._v("docker ps -a -q | xargs docker rm")])])]),s._v(" "),a("ul",[a("li",[s._v("清理所有处于终止状态的容器："),a("code",[s._v("docker container prune")])])]),s._v(" "),a("h3",{attrs:{id:"常用镜像-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用镜像-容器"}},[s._v("#")]),s._v(" 常用镜像/容器")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("MySQL")]),s._v(" "),a("p",[a("code",[s._v("docker run -d --name=tensquare_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root [mysqlname/id]")])]),s._v(" "),a("p",[s._v("会设置ROOT用户的密码为root")])])]),s._v(" "),a("h2",{attrs:{id:"常用命令表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令表"}},[s._v("#")]),s._v(" 常用命令表")]),s._v(" "),a("p",[a("img",{attrs:{src:t(660),alt:"img"}})]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("attach    Attach to a running container                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前 shell 下 attach 连接指定运行镜像")]),s._v("\nbuild     Build an image from a Dockerfile              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过 Dockerfile 定制镜像")]),s._v("\ncommit    Create a new image from a container changes   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交当前容器为新的镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v("        Copy files/folders from the containers filesystem to the "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" path   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#从容器中拷贝指定文件或者目录到宿主机中")]),s._v("\ncreate    Create a new container                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个新的容器，同 run，但不启动容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v("      Inspect changes on a container's filesystem   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 docker 容器变化")]),s._v("\nevents    Get real "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" events from the server          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 docker 服务获取容器实时事件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v("      Run a "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" an existing container        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在已存在的容器上运行命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v("    Stream the contents of a container as a "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" archive   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出容器的内容流作为一个 tar 归档文件[对应 import ]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v("   Show the "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v(" of an image                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 展示一个镜像形成历史")]),s._v("\nimages    List images                                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出系统当前镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v("    Create a new filesystem image from the contents of a tarball "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从tar包中的内容创建一个新的文件系统映像[对应export]")]),s._v("\ninfo      Display system-wide information               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示系统相关信息")]),s._v("\ninspect   Return low-level information on a container   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器详细信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v("      Kill a running container                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# kill 指定 docker 容器")]),s._v("\nload      Load an image from a "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" archive              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从一个 tar 包中加载一个镜像[对应 save]")]),s._v("\nlogin     Register or Login to the docker registry server    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注册或者登陆一个 docker 源服务器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("logout")]),s._v("    Log out from a Docker registry server          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从当前 Docker registry 退出")]),s._v("\nlogs      Fetch the logs of a container                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出当前容器日志信息")]),s._v("\nport      Lookup the public-facing port "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" is NAT-ed to PRIVATE_PORT    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看映射端口对应的容器内部源端口")]),s._v("\npause     Pause all processes within a container        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂停容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("        List containers                               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出容器列表")]),s._v("\npull      Pull an image or a repository from the docker registry server   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从docker镜像源服务器拉取指定镜像或者库镜像")]),s._v("\npush      Push an image or a repository to the docker registry server    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 推送指定镜像或者库镜像至docker源服务器")]),s._v("\nrestart   Restart a running container                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启运行的容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("        Remove one or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" containers                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除一个或者多个容器")]),s._v("\nrmi       Remove one or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" images      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]")]),s._v("\nrun       Run a "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" a new container              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个新的容器并运行一个命令")]),s._v("\nsave      Save an image to a "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" archive                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 保存一个镜像为一个 tar 包[对应 load]")]),s._v("\nsearch    Search "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" an image on the Docker Hub         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在 docker hub 中搜索镜像")]),s._v("\nstart     Start a stopped containers                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动容器")]),s._v("\nstop      Stop a running containers                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止容器")]),s._v("\ntag       Tag an image into a repository                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给源中镜像打标签")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("       Lookup the running processes of a container   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器中运行的进程信息")]),s._v("\nunpause   Unpause a paused container                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消暂停容器")]),s._v("\nversion   Show the docker version information           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 docker 版本号")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),s._v("      Block "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("until")]),s._v(" a container stops, "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" print its "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 截取容器停止时的退出状态值")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h2",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),a("p",[s._v("Dockerfile 是一个文本文件，其内包含了一条条的 "),a("strong",[s._v("指令(Instruction)")]),s._v("，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。就是"),a("strong",[s._v("类似 Linux 中如何安装部署应用的过程")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"from-指定基础镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-指定基础镜像"}},[s._v("#")]),s._v(" FROM 指定基础镜像")]),s._v(" "),a("p",[s._v("以之前的 Nginx 镜像为例，这次我们使用 Dockerfile 来定制。在一个空白目录中，建立一个文本文件，并命名为 "),a("code",[s._v("Dockerfile")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" mynginx\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" mynginx\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" Dockerfile\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("Dockerfile")]),s._v("其内容为")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx:latest")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<h1>Hello, Docker!</h1>'")]),s._v(" > /usr/share/nginx/html/index.html")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("注意：该文件的内容都是在 Docker 引擎中 ，与构建时上下文有关，与宿主机无关。为何 nginx 的目录在/usr/share/nginx，是因为以命令行方式进入 run 后的 nginx 容器中，其存在于该目录下。其他应用可能不同，如 Tomcat 在/usr/local/tomcat下")])]),s._v(" "),a("p",[s._v("所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 Nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 "),a("code",[s._v("FROM")]),s._v(" 就是指定 "),a("strong",[s._v("基础镜像")]),s._v("，因此一个 "),a("code",[s._v("Dockerfile")]),s._v(" 中 "),a("code",[s._v("FROM")]),s._v(" 是必备的指令，并且必须是第一条指令。可指定基础镜像的版本如"),a("code",[s._v("nginx:v1")]),s._v("，不指定版本则默认为 "),a("code",[s._v("latest")]),s._v("。")]),s._v(" "),a("p",[s._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 "),a("code",[s._v("scratch")]),s._v("。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。如果你以 "),a("code",[s._v("scratch")]),s._v(" 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如"),a("code",[s._v("swarm")]),s._v("、"),a("code",[s._v("coreos/etcd")]),s._v("。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 "),a("code",[s._v("FROM scratch")]),s._v(" 会让镜像体积更加小巧。使用 Go 语言开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构语言的原因之一。")]),s._v(" "),a("h3",{attrs:{id:"run-执行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-执行命令"}},[s._v("#")]),s._v(" RUN 执行命令")]),s._v(" "),a("p",[a("code",[s._v("RUN")]),s._v(" 指令是用来执行命令行命令的。由于命令行的强大能力，"),a("code",[s._v("RUN")]),s._v(" 指令在定制镜像时是最常用的指令之一。其格式有两种：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("shell 格式：")]),s._v(" "),a("code",[s._v("RUN <命令>")]),s._v("，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 "),a("code",[s._v("RUN")]),s._v(" 指令就是这种格式。")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<h1>Hello, Docker!</h1>'")]),s._v(" > /usr/share/nginx/html/index.html")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("exec 格式：")]),s._v(" "),a("code",[s._v('RUN ["可执行文件", "参数1", "参数2"]')]),s._v("，这更像是函数调用中的格式。")])])]),s._v(" "),a("p",[s._v("既然 "),a("code",[s._v("RUN")]),s._v(" 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" debian:jessie")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt-get update")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt-get install -y gcc libc6-dev make")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" wget -O redis.tar.gz "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir -p /usr/src/redis")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" make -C /usr/src/redis")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" make -C /usr/src/redis install")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("之前说过，Dockerfile 中每一个指令都会建立一层，"),a("code",[s._v("RUN")]),s._v(" 也不例外。每一个 "),a("code",[s._v("RUN")]),s._v(" 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，"),a("code",[s._v("commit")]),s._v(" 这一层的修改，构成新的镜像。")]),s._v(" "),a("p",[s._v("而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。这是很多初学 Docker 的人常犯的一个错误。")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("注意：")]),s._v(" Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。")])]),s._v(" "),a("p",[s._v("上面的 "),a("code",[s._v("Dockerfile")]),s._v(" 正确的写法应该是这样：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" debian:jessie")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" buildDeps="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'gcc libc6-dev make'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && apt-get install -y "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$buildDeps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && wget -O redis.tar.gz "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && mkdir -p /usr/src/redis "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && make -C /usr/src/redis "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && make -C /usr/src/redis install "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && rm -rf /var/lib/apt/lists/* "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && rm redis.tar.gz "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && rm -r /usr/src/redis "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && apt-get purge -y --auto-remove "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$buildDeps")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("首先，之前所有的命令只有一个目的，就是编译、安装 Redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 "),a("code",[s._v("RUN")]),s._v(" 对一一对应不同的命令，而是仅仅使用一个 "),a("code",[s._v("RUN")]),s._v(" 指令，并使用 "),a("code",[s._v("&&")]),s._v(" 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，"),a("strong",[s._v("这并不是在写 Shell 脚本，而是在定义每一层该如何构建。")])]),s._v(" "),a("p",[s._v("并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 "),a("code",[s._v("\\")]),s._v(" 的命令换行方式，以及行首 "),a("code",[s._v("#")]),s._v(" 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。")]),s._v(" "),a("p",[s._v("此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 "),a("code",[s._v("apt")]),s._v(" 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。")]),s._v(" "),a("p",[s._v("很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了"),a("strong",[s._v("每一层构建的最后一定要清理掉无关文件")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"copy-复制文件到容器中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-复制文件到容器中"}},[s._v("#")]),s._v(" COPY 复制文件到容器中")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("COPY <源路径>... <目标路径>")])]),s._v(" "),a("li",[a("code",[s._v('COPY ["<源路径1>",... "<目标路径>"]')])])]),s._v(" "),a("p",[s._v("和 "),a("code",[s._v("RUN")]),s._v(" 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。"),a("code",[s._v("COPY")]),s._v(" 指令将从构建上下文目录中 "),a("code",[s._v("<源路径>")]),s._v(" 的文件/目录复制到新的一层的镜像内的 "),a("code",[s._v("<目标路径>")]),s._v(" 位置。比如：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" package.json /usr/src/app/")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("<源路径>")]),s._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),a("code",[s._v("filepath.Match")]),s._v("规则，如：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" hom* /mydir/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" hom?.txt /mydir/")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("<目标路径>")]),s._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),a("code",[s._v("WORKDIR")]),s._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),s._v(" "),a("p",[s._v("此外，还需要注意一点，使用 "),a("code",[s._v("COPY")]),s._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("修改默认 Tomcat 容器中的 "),a("code",[s._v("index.jsp")])]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" index.jsp /usr/local/tomcat/webapps/ROOT")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意："),a("code",[s._v("index.jsp")]),s._v(" 必须在 Dockerfile 文件所属的上下文中，后面的路径就是容器中的地址，和宿主机无关")]),s._v(" "),a("h3",{attrs:{id:"add（自动解压缩）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add（自动解压缩）"}},[s._v("#")]),s._v(" ADD（自动解压缩）")]),s._v(" "),a("p",[a("code",[s._v("ADD")]),s._v(" 指令和 "),a("code",[s._v("COPY")]),s._v(" 的格式和性质基本一致。但是在 "),a("code",[s._v("COPY")]),s._v(" 基础上增加了一些功能。比如 "),a("code",[s._v("<源路径>")]),s._v(" 可以是一个 "),a("code",[s._v("URL")]),s._v("，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "),a("code",[s._v("<目标路径>")]),s._v(" 去。下载后的文件权限自动设置为 "),a("code",[s._v("600")]),s._v("，如果这并不是想要的权限，那么还需要增加额外的一层 "),a("code",[s._v("RUN")]),s._v(" 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "),a("code",[s._v("RUN")]),s._v(" 指令进行解压缩。所以不如直接使用 "),a("code",[s._v("RUN")]),s._v(" 指令，然后使用 "),a("code",[s._v("wget")]),s._v(" 或者 "),a("code",[s._v("curl")]),s._v(" 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("<源路径>")]),s._v(" 为一个 "),a("code",[s._v("tar")]),s._v(" 压缩文件的话，压缩格式为 "),a("code",[s._v("gzip")]),s._v(", "),a("code",[s._v("bzip2")]),s._v(" 以及 "),a("code",[s._v("xz")]),s._v(" 的情况下，"),a("code",[s._v("ADD")]),s._v(" 指令将会自动解压缩这个压缩文件到 "),a("code",[s._v("<目标路径>")]),s._v(" 去。在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 "),a("code",[s._v("ubuntu")]),s._v(" 中：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" scratch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 "),a("code",[s._v("ADD")]),s._v(" 命令了。在 Docker 官方的 "),a("code",[s._v("Dockerfile 最佳实践文档")]),s._v(" 中要求，尽可能的使用 "),a("code",[s._v("COPY")]),s._v("，因为 "),a("code",[s._v("COPY")]),s._v(" 的语义很明确，就是复制文件而已，而 "),a("code",[s._v("ADD")]),s._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),a("code",[s._v("ADD")]),s._v(" 的场合，就是所提及的需要自动解压缩的场合。另外需要注意的是，"),a("code",[s._v("ADD")]),s._v(" 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。因此在 "),a("code",[s._v("COPY")]),s._v(" 和 "),a("code",[s._v("ADD")]),s._v(" 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "),a("code",[s._v("COPY")]),s._v(" 指令，仅在需要自动解压缩的场合使用 "),a("code",[s._v("ADD")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"cmd-脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd-脚本"}},[s._v("#")]),s._v(" CMD 脚本")]),s._v(" "),a("p",[a("code",[s._v("CMD")]),s._v(" 指令的格式和 "),a("code",[s._v("RUN")]),s._v(" 相似，也是两种格式：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("shell")]),s._v(" 格式："),a("code",[s._v("CMD <命令>")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("exec")]),s._v(" 格式："),a("code",[s._v('CMD ["可执行文件", "参数1", "参数2"...]')])]),s._v(" "),a("p",[s._v("参数列表格式："),a("code",[s._v('CMD ["参数1", "参数2"...]')]),s._v("。在指定了 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 指令后，用 "),a("code",[s._v("CMD")]),s._v(" 指定具体的参数。")])])]),s._v(" "),a("p",[s._v("之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。"),a("code",[s._v("CMD")]),s._v(" 指令就是用于指定默认的容器主进程的启动命令的。")]),s._v(" "),a("p",[s._v("在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"),a("code",[s._v("ubuntu")]),s._v(" 镜像默认的 "),a("code",[s._v("CMD")]),s._v(" 是 "),a("code",[s._v("/bin/bash")]),s._v("，如果我们直接 "),a("code",[s._v("docker run -it ubuntu")]),s._v(" 的话，会直接进入 "),a("code",[s._v("bash")]),s._v("。我们也可以在运行时指定运行别的命令，如 "),a("code",[s._v("docker run -it ubuntu cat /etc/os-release")]),s._v("。这就是用 "),a("code",[s._v("cat /etc/os-release")]),s._v(" 命令替换了默认的 "),a("code",[s._v("/bin/bash")]),s._v(" 命令了，输出了系统版本信息。")]),s._v(" "),a("p",[s._v("在指令格式上，一般"),a("strong",[s._v("推荐")]),s._v("使用 "),a("code",[s._v("exec")]),s._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),a("code",[s._v('"')]),s._v("，而不要使用单引号。如果使用 "),a("code",[s._v("shell")]),s._v(" 格式的话，实际的命令会被包装为 "),a("code",[s._v("sh -c")]),s._v(" 的参数的形式进行执行。比如：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HOME")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在实际执行中，会将其变更为：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sh"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo $HOME"')]),s._v(" ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。")]),s._v(" "),a("p",[s._v("提到 "),a("code",[s._v("CMD")]),s._v(" 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。")]),s._v(" "),a("p",[s._v("一些初学者将 "),a("code",[s._v("CMD")]),s._v(" 写为：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" service nginx start")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后发现容器执行后就立即退出了。甚至在容器内去使用 "),a("code",[s._v("systemctl")]),s._v(" 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。")]),s._v(" "),a("p",[s._v("对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。而使用 "),a("code",[s._v("service nginx start")]),s._v(" 命令，则是希望 upstart 来以后台守护进程形式启动 "),a("code",[s._v("nginx")]),s._v(" 服务。而刚才说了 "),a("code",[s._v("CMD service nginx start")]),s._v(" 会被理解为 "),a("code",[s._v('CMD [ "sh", "-c", "service nginx start"]')]),s._v("，因此主进程实际上是 "),a("code",[s._v("sh")]),s._v("。那么当 "),a("code",[s._v("service nginx start")]),s._v(" 命令结束后，"),a("code",[s._v("sh")]),s._v(" 也就结束了，"),a("code",[s._v("sh")]),s._v(" 作为"),a("strong",[s._v("主进程退出了，自然就会令容器退出")]),s._v("。")]),s._v(" "),a("p",[s._v("正确的做法是直接执行 "),a("code",[s._v("nginx")]),s._v(" 可执行文件，并且要求以前台形式运行。比如：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-g"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"daemon off;"')]),s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"entrypoint-脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-脚本"}},[s._v("#")]),s._v(" ENTRYPOINT 脚本")]),s._v(" "),a("p",[a("code",[s._v("ENTRYPOINT")]),s._v(" 的格式和 "),a("code",[s._v("CMD")]),s._v(" 指令格式一样，分为 "),a("code",[s._v("exec")]),s._v(" 格式和 "),a("code",[s._v("shell")]),s._v(" 格式。")]),s._v(" "),a("p",[a("code",[s._v("ENTRYPOINT")]),s._v(" 的目的和 "),a("code",[s._v("CMD")]),s._v(" 一样，都是在指定容器启动程序及参数。"),a("code",[s._v("ENTRYPOINT")]),s._v(" 在运行时也可以替代，不过比 "),a("code",[s._v("CMD")]),s._v(" 要略显繁琐，需要通过 "),a("code",[s._v("docker run")]),s._v(" 的参数 "),a("code",[s._v("--entrypoint")]),s._v(" 来指定。当指定了 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 后，"),a("code",[s._v("CMD")]),s._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),a("code",[s._v("CMD")]),s._v(" 的内容作为参数传给 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 指令，换句话说实际执行时，将变为：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[s._v('<ENTRYPOINT> "<CMD>"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那么有了 "),a("code",[s._v("CMD")]),s._v(" 后，为什么还要有 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 呢？这种 "),a("code",[s._v('<ENTRYPOINT> "<CMD>"')]),s._v(" 有什么好处么？让我们来看几个场景。")]),s._v(" "),a("h4",{attrs:{id:"场景一：让镜像变成像命令一样使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景一：让镜像变成像命令一样使用"}},[s._v("#")]),s._v(" 场景一：让镜像变成像命令一样使用")]),s._v(" "),a("p",[s._v("假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 "),a("code",[s._v("CMD")]),s._v(" 来实现：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:16.04")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && apt-get install -y curl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && rm -rf /var/lib/apt/lists/*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"curl"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-s"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://ip.cn"')]),s._v(" ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("假如我们使用 "),a("code",[s._v("docker build -t myip .")]),s._v(" 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 "),a("code",[s._v("CMD")]),s._v(" 中可以看到实质的命令是 "),a("code",[s._v("curl")]),s._v("，那么如果我们希望显示 HTTP 头信息，就需要加上 "),a("code",[s._v("-i")]),s._v(" 参数。那么我们可以直接加 "),a("code",[s._v("-i")]),s._v(" 参数给 "),a("code",[s._v("docker run myip")]),s._v(" 么？")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run myip -i\ndocker: Error response from daemon: invalid header field value "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"oci runtime error: container_linux.go:247: starting container process caused '),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("exec: "),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("-i"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(": executable file not found in "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们可以看到可执行文件找不到的报错，"),a("code",[s._v("executable file not found")]),s._v("。之前我们说过，跟在镜像名后面的是 "),a("code",[s._v("command")]),s._v("，运行时会替换 "),a("code",[s._v("CMD")]),s._v(" 的默认值。因此这里的 "),a("code",[s._v("-i")]),s._v(" 替换了原来的 "),a("code",[s._v("CMD")]),s._v("，而不是添加在原来的 "),a("code",[s._v("curl -s http://ip.cn")]),s._v(" 后面。而 "),a("code",[s._v("-i")]),s._v(" 根本不是命令，所以自然找不到。")]),s._v(" "),a("p",[s._v("那么如果我们希望加入 "),a("code",[s._v("-i")]),s._v(" 这参数，我们就必须重新完整的输入这个命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run myip "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s http://ip.cn -i\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这显然不是很好的解决方案，而使用 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 就可以解决这个问题。现在我们重新用 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 来实现这个镜像：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:16.04")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && apt-get install -y curl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && rm -rf /var/lib/apt/lists/*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"curl"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-s"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://ip.cn"')]),s._v(" ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这次我们再来尝试直接使用 "),a("code",[s._v("docker run myip -i")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\ndocker run myip -i\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\nServer: nginx/1.8.0\nDate: Tue, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" Nov "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2016")]),s._v(" 05:12:40 GMT\nContent-Type: text/html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("charset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" cache-2:80, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" proxy-2_6:8006\nConnection: keep-alive\n当前 IP：61.148.226.66 来自：北京市 联通\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("可以看到，这次成功了。这是因为当存在 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 后，"),a("code",[s._v("CMD")]),s._v(" 的内容将会作为参数传给 "),a("code",[s._v("ENTRYPOINT")]),s._v("，而这里 "),a("code",[s._v("-i")]),s._v(" 就是新的 "),a("code",[s._v("CMD")]),s._v("，因此会作为参数传给 "),a("code",[s._v("curl")]),s._v("，从而达到了我们预期的效果。")]),s._v(" "),a("h4",{attrs:{id:"场景二：应用运行前的准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景二：应用运行前的准备工作"}},[s._v("#")]),s._v(" 场景二：应用运行前的准备工作")]),s._v(" "),a("p",[s._v("启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。")]),s._v(" "),a("p",[s._v("比如 "),a("code",[s._v("mysql")]),s._v(" 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。")]),s._v(" "),a("p",[s._v("此外，可能希望避免使用 "),a("code",[s._v("root")]),s._v(" 用户去启动服务，从而提高安全性，而在启动服务前还需要以 "),a("code",[s._v("root")]),s._v(" 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 "),a("code",[s._v("root")]),s._v(" 身份执行，方便调试等。")]),s._v(" "),a("p",[s._v("这些准备工作是和容器 "),a("code",[s._v("CMD")]),s._v(" 无关的，无论 "),a("code",[s._v("CMD")]),s._v(" 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 中去执行，而这个脚本会将接到的参数（也就是 ``）作为命令，在脚本最后执行。比如官方镜像 "),a("code",[s._v("redis")]),s._v(" 中就是这么做的：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine:3.4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" addgroup -S redis && adduser -S -G redis redis")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.sh"')]),s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 6379")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"redis-server"')]),s._v(" ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 为 "),a("code",[s._v("docker-entrypoint.sh")]),s._v(" 脚本。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# allow the container to be started with `--user`")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'redis-server'")]),s._v(" -a "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chown")]),s._v(" -R redis "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" su-exec redis "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("该脚本的内容就是根据 "),a("code",[s._v("CMD")]),s._v(" 的内容来判断，如果是 "),a("code",[s._v("redis-server")]),s._v(" 的话，则切换到 "),a("code",[s._v("redis")]),s._v(" 用户身份启动服务器，否则依旧使用 "),a("code",[s._v("root")]),s._v(" 身份执行。比如：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run -it redis "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("uid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("groups")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"env"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[s._v("#")]),s._v(" ENV")]),s._v(" "),a("p",[s._v("格式有两种：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("ENV")])]),s._v(" "),a("li",[a("code",[s._v("ENV = =...")])])]),s._v(" "),a("p",[s._v("这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 "),a("code",[s._v("RUN")]),s._v("，还是运行时的应用，都可以直接使用这里定义的环境变量。")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" VERSION=1.0 DEBUG=on "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    NAME="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Happy Feet"')])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。")]),s._v(" "),a("p",[s._v("定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 "),a("code",[s._v("node")]),s._v(" 镜像 "),a("code",[s._v("Dockerfile")]),s._v(" 中，就有类似这样的代码：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" NODE_VERSION 7.2.0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" curl -SLO "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && curl -SLO "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && grep "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" node-v$NODE_VERSION-linux-x64.tar.xz\\$"')]),s._v(" SHASUMS256.txt | sha256sum -c - "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && tar -xJf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" -C /usr/local --strip-components=1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && rm "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" SHASUMS256.txt.asc SHASUMS256.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && ln -s /usr/local/bin/node /usr/local/bin/nodejs")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在这里先定义了环境变量 "),a("code",[s._v("NODE_VERSION")]),s._v("，其后的 "),a("code",[s._v("RUN")]),s._v(" 这层里，多次使用 "),a("code",[s._v("$NODE_VERSION")]),s._v(" 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 "),a("code",[s._v("7.2.0")]),s._v(" 即可，"),a("code",[s._v("Dockerfile")]),s._v(" 构建维护变得更轻松了。")]),s._v(" "),a("p",[s._v("下列指令可以支持环境变量展开： "),a("code",[s._v("ADD")]),s._v("、"),a("code",[s._v("COPY")]),s._v("、"),a("code",[s._v("ENV")]),s._v("、"),a("code",[s._v("EXPOSE")]),s._v("、"),a("code",[s._v("LABEL")]),s._v("、"),a("code",[s._v("USER")]),s._v("、"),a("code",[s._v("WORKDIR")]),s._v("、"),a("code",[s._v("VOLUME")]),s._v("、"),a("code",[s._v("STOPSIGNAL")]),s._v("、"),a("code",[s._v("ONBUILD")]),s._v("。")]),s._v(" "),a("p",[s._v("可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 "),a("code",[s._v("Dockerfile")]),s._v(" 制作更多的镜像，只需使用不同的环境变量即可。")]),s._v(" "),a("h3",{attrs:{id:"volume"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[s._v("#")]),s._v(" VOLUME")]),s._v(" "),a("p",[s._v("格式为：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v('VOLUME ["<路径1>", "<路径2>"...]')])]),s._v(" "),a("li",[a("code",[s._v("VOLUME <路径>")])])]),s._v(" "),a("p",[s._v("之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),a("code",[s._v("Dockerfile")]),s._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VOLUME")]),s._v(" /data")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这里的 "),a("code",[s._v("/data")]),s._v(" 目录就会在运行时自动挂载为匿名卷，任何向 "),a("code",[s._v("/data")]),s._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run -d -v mydata:/data xxxx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在这行命令中，就使用了 "),a("code",[s._v("mydata")]),s._v(" 这个命名卷挂载到了 "),a("code",[s._v("/data")]),s._v(" 这个位置，替代了 "),a("code",[s._v("Dockerfile")]),s._v(" 中定义的匿名卷的挂载配置。")]),s._v(" "),a("h3",{attrs:{id:"expose-声明端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expose-声明端口"}},[s._v("#")]),s._v(" EXPOSE 声明端口")]),s._v(" "),a("p",[s._v("格式为 "),a("code",[s._v("EXPOSE <端口1> [<端口2>...]")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("EXPOSE")]),s._v(" 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "),a("code",[s._v("docker run -P")]),s._v(" 时，会自动随机映射 "),a("code",[s._v("EXPOSE")]),s._v(" 的端口。")]),s._v(" "),a("p",[s._v("此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 "),a("code",[s._v("--icc=false")]),s._v("，当指定该参数后，容器间将默认无法互访，除非互相间使用了 "),a("code",[s._v("--links")]),s._v(" 参数的容器才可以互通，并且只有镜像中 "),a("code",[s._v("EXPOSE")]),s._v(" 所声明的端口才可以被访问。这个 "),a("code",[s._v("--icc=false")]),s._v(" 的用法，在引入了 "),a("code",[s._v("docker network")]),s._v(" 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。")]),s._v(" "),a("p",[s._v("要将 "),a("code",[s._v("EXPOSE")]),s._v(" 和在运行时使用 "),a("code",[s._v("-p <宿主端口>:<容器端口>")]),s._v(" 区分开来。"),a("code",[s._v("-p")]),s._v("，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "),a("code",[s._v("EXPOSE")]),s._v(" 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")]),s._v(" "),a("h3",{attrs:{id:"workdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[s._v("#")]),s._v(" WORKDIR")]),s._v(" "),a("p",[s._v("格式为 "),a("code",[s._v("WORKDIR <工作目录路径>")]),s._v("。")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("WORKDIR")]),s._v(" 指令可以来"),a("strong",[s._v("指定工作目录")]),s._v("（或者称为当前目录）类似"),a("code",[s._v("cd")]),s._v("，使用"),a("code",[s._v("exec")]),s._v("进入容器后的目录。以后各层的当前目录就被改为指定的目录，如该目录不存在，"),a("code",[s._v("WORKDIR")]),s._v(" 会帮你建立目录。之前提到一些初学者常犯的错误是把 "),a("code",[s._v("Dockerfile")]),s._v(" 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" > world.txt")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果将这个 "),a("code",[s._v("Dockerfile")]),s._v(" 进行构建镜像运行后，会发现找不到 "),a("code",[s._v("/app/world.txt")]),s._v(" 文件，或者其内容不是 "),a("code",[s._v("hello")]),s._v("。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "),a("code",[s._v("Dockerfile")]),s._v(" 中，这两行 "),a("code",[s._v("RUN")]),s._v(" 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "),a("code",[s._v("Dockerfile")]),s._v(" 构建分层存储的概念不了解所导致的错误。")]),s._v(" "),a("p",[s._v("之前说过每一个 "),a("code",[s._v("RUN")]),s._v(" 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "),a("code",[s._v("RUN cd /app")]),s._v(" 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。")]),s._v(" "),a("p",[s._v("因此如果需要改变以后各层的工作目录的位置，那么应该使用 "),a("code",[s._v("WORKDIR")]),s._v(" 指令。")]),s._v(" "),a("h3",{attrs:{id:"构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[s._v("#")]),s._v(" 构建镜像")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("Dockerfile")]),s._v(" 文件所在目录执行：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker build "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("选项"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("上下文路径/URL/-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("root@VM-0-3-ubuntu:/home/ubuntu/Documents/mynginx"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker build -t mynginx:v1 .")]),s._v("\nSending build context to Docker daemon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".048kB\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/2 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" FROM nginx:latest\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 231d40e811cd\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("/2 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" RUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<h1>Hello, Docker!</h1>'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /usr/share/nginx/html/index.html\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Using cache\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 7a882127e80e\nSuccessfully built 7a882127e80e\nSuccessfully tagged mynginx:v1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("此时我们构建了一个 "),a("code",[s._v("mynginx")]),s._v(" 版本为"),a("code",[s._v("v1")]),s._v("的镜像")]),s._v(" "),a("h3",{attrs:{id:"镜像构建上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建上下文"}},[s._v("#")]),s._v(" 镜像构建上下文")]),s._v(" "),a("p",[s._v("如果注意，会看到 "),a("code",[s._v("docker build")]),s._v(" 命令最后有一个 "),a("code",[s._v(".")]),s._v("，表示当前目录，而 "),a("code",[s._v("Dockerfile")]),s._v(" 就在当前目录，因此不少初学者以为这个路径是在指定 "),a("code",[s._v("Dockerfile")]),s._v(" 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 "),a("strong",[s._v("上下文路径")]),s._v("。那么什么是上下文呢？")]),s._v(" "),a("p",[s._v("首先我们要理解 "),a("code",[s._v("docker build")]),s._v(" 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 "),a("code",[s._v("Docker Remote API")]),s._v("，而如 "),a("code",[s._v("docker")]),s._v(" 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 "),a("code",[s._v("docker")]),s._v(" 功能，但实际上一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。")]),s._v(" "),a("p",[s._v("当我们进行镜像构建的时候，并非所有定制都会通过 "),a("code",[s._v("RUN")]),s._v(" 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 "),a("code",[s._v("COPY")]),s._v(" 指令、"),a("code",[s._v("ADD")]),s._v(" 指令等。而 "),a("code",[s._v("docker build")]),s._v(" 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，"),a("code",[s._v("docker build")]),s._v(" 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。")]),s._v(" "),a("p",[s._v("如果在 "),a("code",[s._v("Dockerfile")]),s._v(" 中这么写：")]),s._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./package.json /app/")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这并不是要复制执行 "),a("code",[s._v("docker build")]),s._v(" 命令所在的目录下的 "),a("code",[s._v("package.json")]),s._v("，也不是复制 "),a("code",[s._v("Dockerfile")]),s._v(" 所在目录下的 "),a("code",[s._v("package.json")]),s._v("，而是复制 "),a("strong",[s._v("上下文（context）")]),s._v(" 目录下的 "),a("code",[s._v("package.json")]),s._v("。")]),s._v(" "),a("p",[s._v("因此，"),a("code",[s._v("COPY")]),s._v(" 这类指令中的源文件的路径都是"),a("em",[s._v("相对路径")]),s._v("。这也是初学者经常会问的为什么 "),a("code",[s._v("COPY ../package.json /app")]),s._v(" 或者 "),a("code",[s._v("COPY /opt/xxxx /app")]),s._v(" 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。")]),s._v(" "),a("p",[s._v("现在就可以理解刚才的命令 "),a("code",[s._v("docker build -t mynginx:v1 .")]),s._v(" 中的这个 "),a("code",[s._v(".")]),s._v("，实际上是在指定上下文的目录，"),a("code",[s._v("docker build")]),s._v(" 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("如果观察 "),a("code",[s._v("docker build")]),s._v(" 输出，我们其实已经看到了这个发送上下文的过程：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Sending build context to Docker daemon  2.048kB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 "),a("code",[s._v("COPY /opt/xxxx /app")]),s._v(" 不工作后，于是干脆将 "),a("code",[s._v("Dockerfile")]),s._v(" 放到了硬盘根目录去构建，结果发现 "),a("code",[s._v("docker build")]),s._v(" 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 "),a("code",[s._v("docker build")]),s._v(" 打包整个硬盘，这显然是使用错误。")]),s._v(" "),a("p",[s._v("一般来说，应该会将 "),a("code",[s._v("Dockerfile")]),s._v(" 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 "),a("code",[s._v(".gitignore")]),s._v(" 一样的语法写一个 "),a("code",[s._v(".dockerignore")]),s._v("，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。")]),s._v(" "),a("p",[s._v("那么为什么会有人误以为 "),a("code",[s._v(".")]),s._v(" 是指定 "),a("code",[s._v("Dockerfile")]),s._v(" 所在目录呢？这是因为在默认情况下，如果不额外指定 "),a("code",[s._v("Dockerfile")]),s._v(" 的话，会将上下文目录下的名为 "),a("code",[s._v("Dockerfile")]),s._v(" 的文件作为 Dockerfile。")]),s._v(" "),a("p",[s._v("这只是默认行为，实际上 "),a("code",[s._v("Dockerfile")]),s._v(" 的文件名并不要求必须为 "),a("code",[s._v("Dockerfile")]),s._v("，而且并不要求必须位于上下文目录中，比如可以用 "),a("code",[s._v("-f ../Dockerfile.php")]),s._v(" 参数指定某个文件作为 "),a("code",[s._v("Dockerfile")]),s._v("。")]),s._v(" "),a("p",[s._v("当然，一般大家习惯性的会使用默认的文件名 "),a("code",[s._v("Dockerfile")]),s._v("，以及会将其置于镜像构建上下文目录中。")])])}),[],!1,null,null,null);e.default=r.exports}}]);