(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{484:function(t,a,s){t.exports=s.p+"assets/img/image-20191007235251066.439cfd9e.png"},485:function(t,a,s){t.exports=s.p+"assets/img/page17image24711664.5c331213.png"},703:function(t,a,s){"use strict";s.r(a);var e=s(11),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"collection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("容器由来")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("对象数组："),e("strong",[t._v("数组可以存储基本数据类型和引用类型，存储引用类型的数组就叫")]),t._v("对象数组")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("容器（container）")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("由来")]),t._v(" Java--\x3e面向对象--\x3e操作很多对象--\x3e存储--\x3e容器")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("容器与数组的区别")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("长度")]),t._v(" 数组固定，容器（集合）可变")]),t._v(" "),e("li",[e("strong",[t._v("存储类型")]),t._v(" 数组可以是基本类型和引用类型，容器（集合）只能是引用类型")]),t._v(" "),e("li",[e("strong",[t._v("元素类型")]),t._v(" 数组只能存储同一类型，容器（集合）可以存储不同类型（一般也存储同一种类型）")]),t._v(" "),e("li",[t._v("方法 数组方法有限，增删改非常不便，效率也不高；集合就不同了，可选择性多")]),t._v(" "),e("li",[t._v("数据结构 数组元素有序可重复；集合可选择多")])])])])])])]),t._v(" "),e("h2",{attrs:{id:"collection（java-util）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection（java-util）"}},[t._v("#")]),t._v(" Collection（java.util）")]),t._v(" "),e("h3",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[e("code",[t._v("Collection")]),t._v("是所有"),e("strong",[t._v("单列集合")]),t._v("的"),e("strong",[t._v("父接口")]),t._v("，在"),e("code",[t._v("Collection")]),t._v("中定义了单列集合"),e("code",[t._v("List")]),t._v("、"),e("code",[t._v("Set")]),t._v("和"),e("code",[t._v("Queue")]),t._v("通用的一些方法，这些方法可用于操作所有的单列集合。")]),t._v(" "),e("p",[t._v("由于其"),e("strong",[t._v("重写")]),t._v("了"),e("code",[t._v("toString()")]),t._v("方法，所以可以直接打印其内容。这点与数组不同，数组需要借助"),e("code",[t._v("Arrays")]),t._v("工具类")]),t._v(" "),e("p",[e("img",{attrs:{src:s(484),alt:"image-20191007235251066"}})]),t._v(" "),e("h3",{attrs:{id:"常用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[e("code",[t._v("Collection")]),t._v("如下方法底层会调用"),e("code",[t._v("equals()")]),t._v("判断，所以操作自定义类型时需要"),e("strong",[t._v("重写")]),e("code",[t._v("equals()")])])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("添加")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("boolean add(E e)")]),t._v("：添加该对象到下一个索引，当成一个元素")]),t._v(" "),e("li",[e("code",[t._v("boolean addAll(Collection c)")]),t._v("：复制容器中其每一个元素，每个单独添加")])])]),t._v(" "),e("li",[e("strong",[t._v("删除")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("void clear()")]),t._v("：删除集合中所有元素，但集合还存在")]),t._v(" "),e("li",[e("code",[t._v("boolean remove(Object o)")]),t._v("：区别 List 中的")]),t._v(" "),e("li",[e("code",[t._v("boolean removeAll(Collection c)")]),t._v("：差集关系")]),t._v(" "),e("li",[e("code",[t._v("default boolean removeIf(Predicate<? super E> filter)")]),t._v("：根据条件删除")])])]),t._v(" "),e("li",[e("strong",[t._v("判断")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("boolean isEmpty()")])]),t._v(" "),e("li",[e("code",[t._v("boolean contains(Object o)")]),t._v(" ：")]),t._v(" "),e("li",[e("code",[t._v("boolean containsAll(Collection<?> c)")]),t._v(" ："),e("strong",[t._v("子集")]),t._v("关系")]),t._v(" "),e("li",[e("code",[t._v("boolean equals(Object o)")]),t._v("：（根据实际对象可能根据元素顺序依次）对比每个元素")]),t._v(" "),e("li",[e("code",[t._v("int hashCode()")])])])]),t._v(" "),e("li",[e("strong",[t._v("交集")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("boolean retainAll(Collection<?> c)")]),t._v("：交集")])])]),t._v(" "),e("li",[e("strong",[t._v("获取容量")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("int size()")])])])]),t._v(" "),e("li",[e("strong",[t._v("返回迭代器")]),t._v("，"),e("code",[t._v("Collection")]),t._v("特有\n"),e("ul",[e("li",[e("code",[t._v("Iterator iterator()")])])])]),t._v(" "),e("li",[e("strong",[t._v("集合")]),t._v("转"),e("strong",[t._v("数组")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Object[] toArray()")])])])]),t._v(" "),e("li",[e("strong",[t._v("Stream 流")])])]),t._v(" "),e("h2",{attrs:{id:"iterable（java-lang）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterable（java-lang）"}},[t._v("#")]),t._v(" Iterable（java.lang）")]),t._v(" "),e("p",[e("code",[t._v("Collection")]),t._v("接口继承了"),e("code",[t._v("java.lang.Iterable")]),t._v("接口，该接口有一个"),e("code",[t._v("iterator()")]),t._v("方法，返回一个实现了"),e("code",[t._v("Iterator")]),t._v("接口的对象。")]),t._v(" "),e("h2",{attrs:{id:"iterator（java-util）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterator（java-util）"}},[t._v("#")]),t._v(" Iterator（java.util）")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Iterator")]),t._v("对象称为迭代器（设计模式的一种），主要用于遍历 "),e("code",[t._v("Collection")]),t._v(" 集合中的元素。")]),t._v(" "),e("li",[t._v("GOF 给迭代器模式的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”。——检票")]),t._v(" "),e("li",[e("code",[t._v("Iterator")]),t._v(" "),e("strong",[t._v("仅用于遍历集合")]),t._v("，"),e("code",[t._v("Iterator")]),t._v(" 本身并不提供承装对象的能力。如果需要创建"),e("code",[t._v("Iterator")]),t._v(" 对象，则必须有一个被迭代的集合。集合对象"),e("strong",[t._v("每次")]),t._v("调用"),e("code",[t._v("iterator()")]),t._v("方法都得到一个"),e("strong",[t._v("全新的迭代器对象")]),t._v("，"),e("strong",[t._v("默认游标都在集合的第一个元素之前")]),t._v("。")])]),t._v(" "),e("p",[t._v("常用方法：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("Iterator<E> iterator()")]),t._v(": "),e("strong",[t._v("获取"),e("code",[t._v("Collection")]),t._v("对应的迭代器")]),t._v("，用来遍历集合中的元素的。这个接口的泛型跟着所属集合走，集合是什么泛型，迭代器就是什么泛型。"),e("strong",[t._v("每次调用都会得到一个全新的迭代器对象")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("boolean hasNext()")]),t._v("：如果"),e("strong",[t._v("容器中还有元素可以迭代")]),t._v("，则"),e("strong",[t._v("返回 true")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("E next()")]),t._v("：指针下移，并返回迭代的"),e("strong",[t._v("元素")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("default void remove()")]),t._v("：删除集合的元素。但是是遍历过程中通过迭代器对象的"),e("code",[t._v("remove")]),t._v("方法，"),e("strong",[t._v("不是集合对象的"),e("code",[t._v("remove")]),t._v("方法")]),t._v("。如果还未调用"),e("code",[t._v("next()")]),t._v("或在上一次调用 "),e("code",[t._v("next()")]),t._v(" 方法之后已经调用了 "),e("code",[t._v("remove")]),t._v(" 方法，再调用"),e("code",[t._v("remove")]),t._v("都会报"),e("code",[t._v("IllegalStateException")]),t._v("。")])]),t._v(" "),e("li",[e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// iterator.remove();// 错误")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// iterator.remove();// 错误")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])])])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("迭代器执行原理如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(485),alt:"page17image24711664.png"}})]),t._v(" "),e("p",[t._v("在调用"),e("code",[t._v("it.next()")]),t._v("方法之前必须要调用"),e("code",[t._v("it.hasNext()")]),t._v("进行检测。若不调用，且下一条记录无效，会抛出"),e("code",[t._v("NoSuchElementException")]),t._v("异常。")]),t._v(" "),e("p",[e("code",[t._v("Iterator")]),t._v("迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素。在调用"),e("code",[t._v("Iterator")]),t._v("的"),e("code",[t._v("next()")]),t._v("方法之前，迭代器的索引位于"),e("strong",[t._v("第一个元素之前")]),t._v("，不指向任何元素，当第一次调用迭代器的"),e("code",[t._v("next()")]),t._v("方法后，迭代器的"),e("strong",[t._v("索引会向后移动一位，指向第一个元素并将该元素返回")]),t._v("，当再次~。依此类推，直到"),e("code",[t._v("hasNext()")]),t._v("方法返回 false，表示到达了集合的末尾，终止对元素的遍历。")])])]),t._v(" "),e("h2",{attrs:{id:"for-each-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-each-循环"}},[t._v("#")]),t._v(" for each 循环")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("增强 for 循环（也称 foreach 循环）是"),e("strong",[t._v("JDK1.5")]),t._v("以后出来的一个高级 for 循环，专门用来"),e("strong",[t._v("遍历"),e("code",[t._v("Array")]),t._v("和"),e("code",[t._v("Collection")])]),t._v("。它的内部"),e("strong",[t._v("原理其实是个"),e("code",[t._v("Iterator")]),t._v("迭代器")]),t._v("，所以在遍历的过程中，"),e("strong",[t._v("尽量不要对"),e("code",[t._v("Collection")]),t._v("中的元素进行增删操作")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Collection<E> extends Iterable<E>")]),t._v("，（"),e("strong",[t._v("所有 Collection")]),t._v("）实现此接口允许对象成为“"),e("strong",[t._v("foreach")]),t._v("”语句目标。")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" arraylist "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("arraylist"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])])]),t._v(" "),e("h2",{attrs:{id:"并发修改异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发修改异常"}},[t._v("#")]),t._v(" 并发修改异常")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("ConcurrentModificationException")]),t._v("现象："),e("strong",[t._v("迭代器遍历集合，集合修改集合元素")])])]),t._v(" "),e("li",[e("p",[t._v("原因：迭代器依赖于集合，而集合的改变导致迭代器预期的迭代次数发生改变")])]),t._v(" "),e("li",[e("p",[t._v("解决：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("迭代器遍历，并利用"),e("code",[t._v("Iterator")]),t._v("的"),e("code",[t._v("remove")]),t._v("方法")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("集合遍历，集合修改")]),t._v("（利用"),e("code",[t._v("get()")]),t._v("和"),e("code",[t._v("size()")]),t._v("），增加元素在集合末尾")])]),t._v(" "),e("li",[e("p",[t._v("删除元素时并跟上 break 语句")])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);