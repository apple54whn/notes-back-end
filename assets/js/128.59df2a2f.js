(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{809:function(v,_,r){"use strict";r.r(_);var t=r(11),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h1",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),r("h2",{attrs:{id:"三层架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三层架构"}},[v._v("#")]),v._v(" 三层架构")]),v._v(" "),r("p",[v._v("三层架构")]),v._v(" "),r("ul",[r("li",[v._v("表现层（web）：接收客户端请求，向客户端响应结果。包括控制层(接收请求)、展示层(展示结果)，采用MVC模型")]),v._v(" "),r("li",[v._v("业务逻辑层（service）：处理具体的业务逻辑，包括事务")]),v._v(" "),r("li",[v._v("持久层（dao）：数据持久化，即和数据库交互，对数据库表进行增删改查")])]),v._v(" "),r("h2",{attrs:{id:"mvc-模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvc-模型"}},[v._v("#")]),v._v(" MVC 模型")]),v._v(" "),r("p",[v._v("MVC模型（Model View Controller），即模型视图控制器，每个部分各司其职。")]),v._v(" "),r("ul",[r("li",[v._v("Model：数据模型，JavaBean的类，用来进行数据封装")]),v._v(" "),r("li",[v._v("View：指jsp或者html。作用一般就是展示数据的。通常视图是依据模型数据创建的")]),v._v(" "),r("li",[v._v("Controller：是应用程序中处理用户交互的部分，作用一般就是处理程序逻辑的，整个流程的控制器。可以数据校验等")])]),v._v(" "),r("h2",{attrs:{id:"springmvc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[v._v("#")]),v._v(" SpringMVC")]),v._v(" "),r("h3",{attrs:{id:"概述-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),r("ul",[r("li",[v._v("是一种基于"),r("strong",[v._v("Java")]),v._v("实现的MVC设计模型的"),r("strong",[v._v("请求驱动")]),v._v("类型的"),r("strong",[v._v("轻量级WEB框架")]),v._v("。")]),v._v(" "),r("li",[v._v("Spring MVC属于SpringFrameWork的后续产品，已经"),r("strong",[v._v("融合在Spring Web Flow")]),v._v("里面。Spring 框架提供 了构建 Web 应用程序的全功能 MVC 模块。")]),v._v(" "),r("li",[v._v("使用 Spring "),r("strong",[v._v("可插入的 MVC 架构")]),v._v("，从而在使用Spring进行WEB开发时，可以选择使用Spring的 SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。")])]),v._v(" "),r("p",[v._v("SpringMVC 和 Struts2 的优劣分析")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("共同点：")]),v._v(" "),r("ul",[r("li",[v._v("它们都是表现层框架，都是基于 MVC 模型编写的。")]),v._v(" "),r("li",[v._v("它们的底层都离不开原始 ServletAPI。")]),v._v(" "),r("li",[v._v("它们处理请求的机制都是一个核心控制器。")])])]),v._v(" "),r("li",[r("p",[v._v("区别：")]),v._v(" "),r("ul",[r("li",[v._v("Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter")]),v._v(" "),r("li",[v._v("Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类，比Spring MVC会稍慢")]),v._v(" "),r("li",[v._v("Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便")]),v._v(" "),r("li",[v._v("Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提 升，尤其是 struts2 的表单标签，远没有 html 执行效率高")])])])]),v._v(" "),r("h3",{attrs:{id:"执行过程分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行过程分析"}},[v._v("#")]),v._v(" 执行过程分析")]),v._v(" "),r("blockquote",[r("p",[v._v("Java配置也类似")])]),v._v(" "),r("ol",[r("li",[v._v("当启动Tomcat服务器的时候，因为配置了"),r("code",[v._v("load-on-startup")]),v._v("标签，所以会创建"),r("code",[v._v("DispatcherServlet")]),v._v("对象， 并分局初始化参数加载"),r("code",[v._v("spring-config.xml")]),v._v("配置文件或"),r("code",[v._v("SpringConfiguration")]),v._v("配置类")]),v._v(" "),r("li",[v._v("由于开启了注解扫描，那么"),r("code",[v._v("HelloController")]),v._v("对象就会被创建")]),v._v(" "),r("li",[v._v("从index.jsp发送请求，请求会先到达"),r("code",[v._v("DispatcherServlet")]),v._v("前端控制器，根据配置"),r("code",[v._v("@RequestMapping")]),v._v("注解找到执行的方法")]),v._v(" "),r("li",[v._v("根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件")]),v._v(" "),r("li",[v._v("Tomcat服务器渲染页面，做出响应")])]),v._v(" "),r("h3",{attrs:{id:"组件分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组件分析"}},[v._v("#")]),v._v(" 组件分析")]),v._v(" "),r("p",[v._v("在 SpringMVC 的各个组件中，"),r("strong",[v._v("处理器映射器")]),v._v("、"),r("strong",[v._v("处理器适配器")]),v._v("、"),r("strong",[v._v("视图解析器")]),v._v("称为 SpringMVC 的三大组件。 我们只需要编写处理具体业务的"),r("strong",[v._v("控制器")]),v._v("以及"),r("strong",[v._v("视图")]),v._v("。")]),v._v(" "),r("ul",[r("li",[r("p",[r("strong",[v._v("DispatcherServlet")])]),v._v(" "),r("p",[v._v("前端控制器：用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("HandlerMapping")])]),v._v(" "),r("p",[v._v("处理器映射器：HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("Handler")])]),v._v(" "),r("p",[v._v("它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("HandlAdapter")])]),v._v(" "),r("p",[v._v("通过 HandlerAdapter 对处理器进行执行，这是"),r("strong",[v._v("适配器模式")]),v._v("的应用，通过扩展适配器可以对更多类型的处理器进行执行")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("View Resolver")])]),v._v(" "),r("p",[v._v("View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("View")])]),v._v(" "),r("p",[v._v("SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView 等。最常用的视图就是jsp，一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);