(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{722:function(v,_,t){"use strict";t.r(_);var s=t(11),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"并发简史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发简史"}},[v._v("#")]),v._v(" 并发简史")]),v._v(" "),t("h2",{attrs:{id:"早期计算机-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#早期计算机-🔥"}},[v._v("#")]),v._v(" 早期计算机 🔥")]),v._v(" "),t("p",[v._v("早期的计算机没有操作系统，"),t("strong",[v._v("从头到尾只执行一个程序")]),v._v("，该程序可以"),t("strong",[v._v("访问计算机所有资源")]),v._v("。")]),v._v(" "),t("p",[v._v("所以在该环境下，严重"),t("strong",[v._v("浪费了稀有的计算机资源")]),v._v("，并且"),t("strong",[v._v("很难编写和运行程序")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"操作系统、进程、线程出现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统、进程、线程出现"}},[v._v("#")]),v._v(" 操作系统、进程、线程出现")]),v._v(" "),t("h3",{attrs:{id:"功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[v._v("#")]),v._v(" 功能")]),v._v(" "),t("ul",[t("li",[v._v("每次可以执行多个程序，不同程序运行在不同的进程中")]),v._v(" "),t("li",[v._v("操作系统为各个独立的进程分配资源：内存、文件句柄、安全证书等")]),v._v(" "),t("li",[v._v("进程间可以通过粗粒度的通信机制来交换数据：套接字、信号处理器、共享内存、信号量、文件等")])]),v._v(" "),t("h3",{attrs:{id:"目的-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目的-🔥"}},[v._v("#")]),v._v(" 目的 🔥")]),v._v(" "),t("p",[v._v("操作系统、进程、线程出现，是为了解决如下问题（基于如下原因）：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("资源利用率")]),v._v("\n在等待IO时执行其他程序可以提高资源利用率")]),v._v(" "),t("li",[t("strong",[v._v("公平性")]),v._v("\n不同用户和程序对于计算机的资源有着同等的使用权，一种方式是通过粗粒度"),t("strong",[v._v("时间分片")]),v._v("使用户和程序共享计算机资源，而不是有一个程序从头执行到尾，在启动下一个程序")]),v._v(" "),t("li",[t("strong",[v._v("便利性")]),v._v("\n在计算多个任务时，不应该只编写一个程序实现，应该每个程序执行一个任务，并在必要时互相通信")])]),v._v(" "),t("h3",{attrs:{id:"线程-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程-🔥"}},[v._v("#")]),v._v(" 线程 🔥")]),v._v(" "),t("p",[v._v("上述也是线程出现的因素")]),v._v(" "),t("ul",[t("li",[v._v("现代操作系统中，都是以"),t("strong",[v._v("线程为基本的调度单位")]),v._v("，不是进程！")]),v._v(" "),t("li",[v._v("线程允许在同一个进程中同时存在多个"),t("strong",[v._v("程序控制流")])]),v._v(" "),t("li",[t("strong",[v._v("线程会共享进程范围内的资源")]),v._v("：内存句柄、文件句柄。但每个线程有各自的程序计数器（PC）、栈、局部变量等")]),v._v(" "),t("li",[v._v("同一个程序（不同程序当然也可以）的多个"),t("strong",[v._v("线程")]),v._v("可以同时被"),t("strong",[v._v("调度到多个CPU")]),v._v("上运行")])]),v._v(" "),t("h3",{attrs:{id:"线程优势-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程优势-🔥"}},[v._v("#")]),v._v(" 线程优势 🔥")]),v._v(" "),t("ul",[t("li",[v._v("GUI\n采用一个事件分发线程来代替主事件循环，提高用户界面响应灵敏度。")]),v._v(" "),t("li",[t("strong",[v._v("服务器")]),v._v("\n通过提高时钟频率来提高性能越来越困难，转而在单个芯片上放多个处理器核。\n多线程程序可以在"),t("strong",[v._v("多处理器")]),v._v("上执行，提高了处理器"),t("strong",[v._v("资源利用率")]),v._v("从而提升"),t("strong",[v._v("系统吞吐率")]),v._v("\n多线程程序在"),t("strong",[v._v("单处理器")]),v._v("上执行，"),t("strong",[v._v("在等待IO时可以让另一个线程继续执行")]),v._v("，从而"),t("strong",[v._v("提高吞吐率")])]),v._v(" "),t("li",[t("strong",[v._v("简化JVM实现")]),v._v("\nGC通常在一个或多个专门的线程中运行")]),v._v(" "),t("li",[t("strong",[v._v("建模的简单性")]),v._v("\n如：Servlet程序就像编写单线程程序一样，无需关心多少请求在同一时刻要被处理，无需了解Socket是否阻塞")]),v._v(" "),t("li",[v._v("异步事件简单化处理\n单线程服务器应用必须使用非阻塞IO，其复杂性远高于同步阻塞IO，容易出错。\n早期操作系统可创建线程数量比较少（数百），所以操作系统提供了实现多路IO的方法，如Unix的select、poll等。要调用这些方法，Java需要实现非阻塞IO（NIO）。而现代操作系统可创建线程数量有极大提升，为每个客户端分配一个线程也行")])]),v._v(" "),t("h3",{attrs:{id:"线程风险-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程风险-🔥"}},[v._v("#")]),v._v(" 线程风险 🔥")]),v._v(" "),t("h4",{attrs:{id:"安全性问题-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全性问题-🔥"}},[v._v("#")]),v._v(" 安全性问题 🔥")]),v._v(" "),t("ul",[t("li",[v._v("由于"),t("strong",[v._v("同一个进程中的所有线程都共享进程的内存地址空间")]),v._v("，所以这些线程可以访问相同的变量，并在同一个堆上分配对象")]),v._v(" "),t("li",[v._v("此时需要比在进程中共享数据更细粒度的数据共享机制，即明确的"),t("strong",[v._v("同步机制协同对共享数据访问")]),v._v("。")])]),v._v(" "),t("p",[v._v("如：++的非原子操作、指令重排问题")]),v._v(" "),t("h4",{attrs:{id:"活跃性问题-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#活跃性问题-🔥"}},[v._v("#")]),v._v(" 活跃性问题 🔥")]),v._v(" "),t("p",[v._v("如："),t("strong",[v._v("死锁")]),v._v("、"),t("strong",[v._v("饥饿")]),v._v("、"),t("strong",[v._v("活锁")])]),v._v(" "),t("h4",{attrs:{id:"性能问题-🔥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能问题-🔥"}},[v._v("#")]),v._v(" 性能问题 🔥")]),v._v(" "),t("p",[v._v("活跃性问题意味着某件事情应该最终会发生，但是不够好。与活跃性问题相关的就是性能问题。")]),v._v(" "),t("p",[v._v("在多线程程序中，线"),t("strong",[v._v("程调度器挂起活跃线程")]),v._v("转而"),t("strong",[v._v("运行另一个线程")]),v._v("时，就会频繁出现"),t("strong",[v._v("上下文切换")]),v._v("，该操作会带来"),t("strong",[v._v("极大的开销")]),v._v("："),t("strong",[v._v("保存和恢复执行上下文，丢失局部性")]),v._v("，且CPU将更多花在"),t("strong",[v._v("线程调度")]),v._v("上！而不是线程执行上！")])])}),[],!1,null,null,null);_.default=r.exports}}]);