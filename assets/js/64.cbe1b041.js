(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{609:function(v,r,a){v.exports=a.p+"assets/img/spring-overview.5d57b59e.png"},769:function(v,r,a){"use strict";a.r(r);var t=a(11),_=Object(t.a)({},(function(){var v=this,r=v.$createElement,t=v._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("h2",{attrs:{id:"什么是框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是框架"}},[v._v("#")]),v._v(" 什么是框架")]),v._v(" "),t("p",[t("strong",[v._v("框架")]),v._v("（Framework）是整个或部分系统的"),t("strong",[v._v("可重用设计")]),v._v("，表现为一组抽象构件及构件实例间交互的方法；另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。")]),v._v(" "),t("p",[v._v("框架一般处在低层应用平台（如 J2EE）和高层业务逻辑之间的中间层。")]),v._v(" "),t("h2",{attrs:{id:"spring-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-概述"}},[v._v("#")]),v._v(" Spring 概述")]),v._v(" "),t("p",[v._v("Spring是分层的 Java SE/EE应用 "),t("strong",[v._v("full-stack 轻量级开源框架")]),v._v("，"),t("strong",[v._v("以 IoC（Inverse Of Control： 控制反转）和 AOP（Aspect Oriented Programming：面向切面编程）为内核")]),v._v("，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。")]),v._v(" "),t("p",[v._v("Spring的"),t("strong",[v._v("优势")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("方便解耦，简化开发")])]),v._v(" "),t("p",[v._v("通过Spring提供的IoC容器，可以将对象间的依赖关系交由 Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("AOP编程")]),v._v("的支持")]),v._v(" "),t("p",[v._v("通过 Spring的 AOP 功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过 AOP 轻松应付")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("声明式事务")]),v._v("的支持")]),v._v(" "),t("p",[v._v("可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理， 提高开发效率和质量")])]),v._v(" "),t("li",[t("p",[v._v("方便程序的"),t("strong",[v._v("测试")])]),v._v(" "),t("p",[v._v("可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情")])]),v._v(" "),t("li",[t("p",[v._v("方便"),t("strong",[v._v("集成各种优秀框架")])]),v._v(" "),t("p",[v._v("Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz 等）的直接支持")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("降低JavaEE API的使用难度")])]),v._v(" "),t("p",[v._v("Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的 使用难度大为降低")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("Java源码是经典学习范例")])]),v._v(" "),t("p",[v._v("Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以 及对 Java技术的高深造诣。它的源代码无意是 Java 技术的最佳实践的范例")])])]),v._v(" "),t("p",[t("strong",[v._v("Spring的体系结构")])]),v._v(" "),t("p",[t("img",{attrs:{src:a(609),alt:""}})]),v._v(" "),t("h2",{attrs:{id:"spring-简史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-简史"}},[v._v("#")]),v._v(" Spring 简史")]),v._v(" "),t("h3",{attrs:{id:"spring-1-x-时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-1-x-时代"}},[v._v("#")]),v._v(" Spring 1.x 时代")]),v._v(" "),t("p",[v._v("在 Spring1.x 时代，都是通过 xml 文件配置 bean，随着项目的不断扩大，需要将 xml 配置分放到不同的配置文件中，需要频繁的在 java 类和 xml 配置文件中切换。")]),v._v(" "),t("blockquote",[t("p",[v._v("POJO：比JavaBean更纯净的简单类或接口，主要用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力。")]),v._v(" "),t("p",[v._v("JavaBean：虽然数据的获取与POJO一样，但是JavaBean当中可以有其它的方法。")])]),v._v(" "),t("h3",{attrs:{id:"spring-2-x-时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-2-x-时代"}},[v._v("#")]),v._v(" Spring 2.x 时代")]),v._v(" "),t("p",[v._v("随着 JDK 1.5 带来的注解支持，Spring2.x 可以使用注解对 Bean 进行申明和注入，大大的减少了 xml 配置文件，同时也大大简化了项目的开发。")]),v._v(" "),t("p",[v._v("那么，问题来了，究竟是应该使用 xml 还是注解呢？")]),v._v(" "),t("p",[v._v("最佳实践：")]),v._v(" "),t("ul",[t("li",[v._v("应用的基本配置用 xml，比如：数据源、资源文件等")]),v._v(" "),t("li",[v._v("业务开发用注解，比如：Service 中注入 bean 等")])]),v._v(" "),t("h3",{attrs:{id:"spring-3-x-时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-3-x-时代"}},[v._v("#")]),v._v(" Spring 3.x 时代")]),v._v(" "),t("p",[v._v("从 Spring 3.x 开始提供了 Java 配置方式，使用 Java 配置方式可以更好的理解你配置的 Bean，并且 Spring 4.x 和 Spring boot 都推荐使用 java 配置的方式。")]),v._v(" "),t("h3",{attrs:{id:"spring-5-x-时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-5-x-时代"}},[v._v("#")]),v._v(" Spring 5.x 时代")]),v._v(" "),t("p",[v._v("Spring 5.x 是 Java 界首个支持响应式的 Web 框架，是 Spring 的一个重要版本，距离 Spring4.x 差不多四年。在此期间，大多数增强都是在 Spring Boot 项目中完成的，其最大的亮点就是提供了完整的端到端响应式编程的支持（新增 Spring WebFlux 模块）。")]),v._v(" "),t("p",[v._v("Spring WebFlux 同时支持使用旧的 Spring MVC 注解声明 "),t("code",[v._v("Reactive Controller")]),v._v("。和传统的 "),t("code",[v._v("MVC Controller")]),v._v(" 不同，"),t("code",[v._v("Reactive Controller")]),v._v(" 操作的是 "),t("strong",[v._v("非阻塞")]),v._v(" 的 "),t("code",[v._v("ServerHttpRequest")]),v._v(" 和 "),t("code",[v._v("ServerHttpResponse")]),v._v("，而不再是 Spring MVC 里的 HttpServletRequest 和 HttpServletResponse。")]),v._v(" "),t("p",[v._v("至此也代表着 Java 正式迎来了响应式异步编程的时代。")])])}),[],!1,null,null,null);r.default=_.exports}}]);