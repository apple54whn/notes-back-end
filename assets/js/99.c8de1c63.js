(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{720:function(t,a,s){"use strict";s.r(a);var e=s(11),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_9-nio（暂时未完成）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-nio（暂时未完成）"}},[t._v("#")]),t._v(" 9 NIO（暂时未完成）")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul")]),s("p"),t._v(" "),s("ul",[s("li",[t._v("Java NIO (New IO，Non-Blocking IO) 是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持"),s("strong",[t._v("面向缓冲区")]),t._v("的(IO是面向流的)、"),s("strong",[t._v("基于通道")]),t._v("的IO操作。NIO将以更加高效的方式进行文件的读写操作。")]),t._v(" "),s("li",[t._v("Java API中提供了两套NIO，一套是针对"),s("strong",[t._v("标准输入输出")]),t._v("NIO，另一套就是"),s("strong",[t._v("网络编程")]),t._v("NIO。")]),t._v(" "),s("li",[s("code",[t._v("java.nio.channels.Channel")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("FileChannel")]),t._v("：处理本地文件")]),t._v(" "),s("li",[s("code",[t._v("SocketChannel")]),t._v("：TCP网络编程的客户端的Channel")]),t._v(" "),s("li",[s("code",[t._v("ServerSocketChannel")]),t._v("：TCP网络编程的服务器端的Channel")]),t._v(" "),s("li",[s("code",[t._v("DatagramChannel")]),t._v("：UDP网络编程中发送端和接收端的Channel")])])]),t._v(" "),s("li",[t._v("随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。 因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("早期的Java只提供了一个"),s("code",[t._v("File")]),t._v("类来访问文件系统，但"),s("code",[t._v("File")]),t._v("类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息（如"),s("code",[t._v("renameTo")]),t._v("只返回 boolean，文件存在时重命名失败）。")]),t._v(" "),s("p",[t._v("NIO. 2为了弥补这种不足，引入了"),s("code",[t._v("Path")]),s("strong",[t._v("接口")]),t._v("，代表一个平台无关的平台"),s("strong",[t._v("路径")]),t._v("，描述了"),s("strong",[t._v("目录结构中文件的位置")]),t._v("。"),s("code",[t._v("Path")]),t._v("可以看成是"),s("code",[t._v("File")]),t._v("类的升级版本，实际引用的资源也可以不存在。"),s("code",[t._v("Paths")]),t._v("则包含了两个返回"),s("code",[t._v("Path")]),t._v("的静态工厂方法。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在以前IO操作都是这样写的")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在Java7 中，我们可以这样写")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Path")]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Path")]),t._v("：看成是"),s("code",[t._v("File")]),t._v("类的升级版本，实际引用的资源也可以不存在")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("String toString()")]),t._v(" : 返回调用 Path 对象的字符串表示形式")]),t._v(" "),s("li",[s("code",[t._v("boolean startsWith(String path)")]),t._v(" : 判断是否以 path 路径开始")]),t._v(" "),s("li",[s("code",[t._v("boolean endsWith(String path)")]),t._v(" : 判断是否以 path 路径结束")]),t._v(" "),s("li",[s("code",[t._v("boolean isAbsolute()")]),t._v(" : 判断是否是绝对路径")]),t._v(" "),s("li",[s("code",[t._v("Path getParent()")]),t._v(" :返回Path对象包含整个路径，不包含 Path 对象指定的文件路径")]),t._v(" "),s("li",[s("code",[t._v("Path getRoot()")]),t._v(":返回调用 Path 对象的根路径")]),t._v(" "),s("li",[s("code",[t._v("Path getFileName()")]),t._v(" : 返回与调用 Path 对象关联的文件名")]),t._v(" "),s("li",[s("code",[t._v("int getNameCount()")]),t._v(" : 返回Path 根目录后面元素的数量")]),t._v(" "),s("li",[s("code",[t._v("Path getName(int idx)")]),t._v(" : 返回指定索引位置 idx 的路径名称")]),t._v(" "),s("li",[s("code",[t._v("Path toAbsolutePath()")]),t._v(" : 作为绝对路径返回调用 Path 对象")]),t._v(" "),s("li",[s("code",[t._v("Path resolve(Path p)")]),t._v(" :合并两个路径，返回合并后的路径对应的Path对象")]),t._v(" "),s("li",[s("code",[t._v("File toFile()")]),t._v(": 将Path转化为File类的对象")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Paths")]),t._v("：包含了两个返回"),s("code",[t._v("Path")]),t._v("的静态工厂方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("static Path get(String first, String ... more)")]),t._v("：用于将多个字符串串连成路径")]),t._v(" "),s("li",[s("code",[t._v("static Path get(URI uri)")]),t._v("：返回指定uri对应的Path路径")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Files")]),t._v("：包含了大量静态的工具方法来操作文件或目录")]),t._v(" "),s("ul",[s("li",[t._v("常用方法\n"),s("ul",[s("li",[s("code",[t._v("Path copy(Path src, Path dest, CopyOption ... how)")]),t._v(" : 文件的复制")]),t._v(" "),s("li",[s("code",[t._v("Path createDirectory(Path path, FileAttribute<?> ... attr)")]),t._v(" : 创建一个目录")]),t._v(" "),s("li",[s("code",[t._v("Path createFile(Path path, FileAttribute<?> ... arr)")]),t._v(" : 创建一个文件")]),t._v(" "),s("li",[s("code",[t._v("void delete(Path path)")]),t._v(" : 删除一个文件/目录，如果不存在，执行报错")]),t._v(" "),s("li",[s("code",[t._v("void deleteIfExists(Path path)")]),t._v(" : Path对应的文件/目录如果存在，执行删除")]),t._v(" "),s("li",[s("code",[t._v("Path move(Path src, Path dest, CopyOption...how)")]),t._v(" : 将 src 移动到 dest 位置")]),t._v(" "),s("li",[s("code",[t._v("long size(Path path)")]),t._v(" : 返回 path 指定文件的大小")])])])]),t._v(" "),s("ul",[s("li",[t._v("判断\n"),s("ul",[s("li",[s("code",[t._v("boolean exists(Path path, LinkOption ... opts)")]),t._v(" : 判断文件是否存在")]),t._v(" "),s("li",[s("code",[t._v("boolean isDirectory(Path path, LinkOption ... opts)")]),t._v(" : 判断是否是目录")]),t._v(" "),s("li",[s("code",[t._v("boolean isRegularFile(Path path, LinkOption ... opts)")]),t._v(" : 判断是否是文件")]),t._v(" "),s("li",[s("code",[t._v("boolean isHidden(Path path)")]),t._v(" : 判断是否是隐藏文件")]),t._v(" "),s("li",[s("code",[t._v("boolean isReadable(Path path)")]),t._v(": 判断文件是否可读")]),t._v(" "),s("li",[s("code",[t._v("boolean isWritable(Path path)")]),t._v(": 判断文件是否可写")]),t._v(" "),s("li",[s("code",[t._v("boolean notExists(Path path, LinkOption ... opts)")]),t._v(" : 判断文件是否不存在")])])]),t._v(" "),s("li",[t._v("操作内容\n"),s("ul",[s("li",[s("code",[t._v("SeekableByteChannel newByteChannel(Path path, OpenOption...how)")]),t._v(" : 获取与指定文件的连 接，how 指定打开方式。")]),t._v(" "),s("li",[s("code",[t._v("DirectoryStream<Path> newDirectoryStream(Path path)")]),t._v(" : 打开 path 指定的目录")]),t._v(" "),s("li",[s("code",[t._v("InputStream newInputStream(Path path, OpenOption...how)")]),t._v(":获取 InputStream 对象")]),t._v(" "),s("li",[s("code",[t._v("OutputStream newOutputStream(Path path, OpenOption...how)")]),t._v(" : 获取 OutputStream 对象")])])])])]),t._v(" "),s("li",[s("p",[t._v("Java7中新加的类")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("Path接口")]),t._v("表示路径")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Paths类")]),t._v("中"),s("code",[t._v("Paths.get()")]),t._v("接收一个或多个字符串，表示路径，"),s("strong",[t._v("可以不存在")])])]),t._v(" "),s("li",[s("p",[t._v("Files类中有静态方法")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("public static long copy(Path source,OutputStream out)throws IOException")]),t._v(" "),s("strong",[t._v("复制文件")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Files")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数据库.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"copy数据库.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);