(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{692:function(a,e,t){"use strict";t.r(e);var s=t(11),o=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"比较器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较器"}},[a._v("#")]),a._v(" 比较器")]),a._v(" "),t("p",[a._v("在Java中经常会涉及到对象数组的排序问题，那么就涉及到"),t("strong",[a._v("对象之间的比较")]),a._v("问题，Java实现对象排序的方式有两种：")]),a._v(" "),t("ul",[t("li",[a._v("自然排序："),t("code",[a._v("java.lang.Comparable")])]),a._v(" "),t("li",[a._v("比较器排序："),t("code",[a._v("java.util.Comparator")])])]),a._v(" "),t("h2",{attrs:{id:"comparable-compareto"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comparable-compareto"}},[a._v("#")]),a._v(" Comparable—compareTo")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("Comparable")]),a._v("接口"),t("strong",[a._v("强行对实现它的每个类的对象进行整体排序")]),a._v("。这种排序被称为类的"),t("strong",[a._v("自然排序")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("实现"),t("code",[a._v("Comparable")]),a._v(" 的类必须重写"),t("code",[a._v("compareTo(Object obj)")]),a._v(" 方法，两个对象通过该方法的返回值来比较大小。")]),a._v(" "),t("ul",[t("li",[a._v("如果当前对象this大于形参对象obj，则返回正整数")]),a._v(" "),t("li",[a._v("如果当前对象this小于形参对象obj，则返回负整数")]),a._v(" "),t("li",[a._v("如果当前对象this等于形参对象obj，则返回零。")])])]),a._v(" "),t("li",[t("p",[a._v("实现"),t("code",[a._v("Comparable")]),a._v("接口的对象列表(和数组)可以通过 "),t("code",[a._v("Collections.sort")]),a._v(" 或 "),t("code",[a._v("Arrays.sort")]),a._v("进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。")])]),a._v(" "),t("li",[t("p",[a._v("对于类 C 的每一个 e1 和 e2 来说，当且仅当 "),t("code",[a._v("e1.compareTo(e2) == 0")]),a._v(" 与 "),t("code",[a._v("e1.equals(e2)")]),a._v(" 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）"),t("strong",[a._v("最好使自然排序与 equals 一致")]),a._v("。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Comparable")]),a._v(" 的典型实现（"),t("strong",[a._v("默认都是从小到大排列")]),a._v("的）：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("8种包装类")]),a._v("：按照对应的数值大小进行比较。都实现了"),t("code",[a._v("compareTo()")]),a._v("（底层调用后者），提供了"),t("code",[a._v("compare()")]),a._v("。其中：\n"),t("ul",[t("li",[t("code",[a._v("Character")]),a._v("按照字符的"),t("code",[a._v("Unicode")]),a._v("值来进行比较。")]),a._v(" "),t("li",[t("code",[a._v("Boolean")]),a._v("中"),t("code",[a._v("true")]),a._v("对应的包装类实例大于"),t("code",[a._v("false")]),a._v("对应的包装类实例。")])])]),a._v(" "),t("li",[t("code",[a._v("String")]),a._v("：按照字符串中字符的Unicode值进行比较。实现了"),t("code",[a._v("compareTo()")])]),a._v(" "),t("li",[t("code",[a._v("Date")]),a._v("、"),t("code",[a._v("*Date/Time")]),a._v("等：后面的日期时间比前面的日期时间大。实现了"),t("code",[a._v("compareTo()")])]),a._v(" "),t("li",[t("code",[a._v("BigInteger")]),a._v("、"),t("code",[a._v("BigDecimal")]),a._v("，实现了"),t("code",[a._v("compareTo()")])])])])]),a._v(" "),t("h2",{attrs:{id:"comparator-compare"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comparator-compare"}},[a._v("#")]),a._v(" Comparator—compare")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("当元素的类型没有实现"),t("code",[a._v("java.lang.Comparable")]),a._v("接口而又"),t("strong",[a._v("不方便修改代码")]),a._v("， 或者实现了"),t("code",[a._v("java.lang.Comparable")]),a._v("接口的"),t("strong",[a._v("排序规则不适合当前的操作")]),a._v("，那 么可以使用 "),t("code",[a._v("Comparator")]),a._v(" 的对象来排序，强行对多个对象进行整体排序的比较。")])]),a._v(" "),t("li",[t("p",[a._v("重写"),t("code",[a._v("compare(Object o1,Object o2)")]),a._v("方法，比较o1和o2的大小")]),a._v(" "),t("ul",[t("li",[a._v("如果方法返回正整数，则表示o1大于o2")]),a._v(" "),t("li",[a._v("如果返回0，表示相等")]),a._v(" "),t("li",[a._v("返回负整数，表示 o1小于o2。")])])]),a._v(" "),t("li",[t("p",[a._v("可以将 "),t("code",[a._v("Comparator")]),a._v(" "),t("strong",[a._v("传递给 "),t("code",[a._v("sort")]),a._v(" 方法")]),a._v("（如"),t("code",[a._v("Collections.sort")]),a._v(" 或 "),t("code",[a._v("Arrays.sort")]),a._v("）， 实现精确控制排序。")])]),a._v(" "),t("li",[t("p",[a._v("还可以使用 "),t("code",[a._v("Comparator")]),a._v(" 来控制某些数据结构（如有序set或有序map）的顺序，或者为那些没有自然顺序的对象 "),t("code",[a._v("container")]),a._v(" 提供排序。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("方法（结合 Lambda 使用）")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeSet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" people "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Comparator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("comparingInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("thenComparing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("reversed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])])])])])}),[],!1,null,null,null);e.default=o.exports}}]);