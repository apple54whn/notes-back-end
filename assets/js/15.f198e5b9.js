(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{523:function(t,v,_){t.exports=_.p+"assets/img/16d6779ae10315f9.9126ad6b.png"},524:function(t,v,_){t.exports=_.p+"assets/img/16d6779ad10263a2.b5996ce1.png"},525:function(t,v,_){t.exports=_.p+"assets/img/16d6779ad21ff99f.7658e2dd.png"},526:function(t,v,_){t.exports=_.p+"assets/img/20210107230954415.65eed663.png"},527:function(t,v,_){t.exports=_.p+"assets/img/16d6779aca2f7215.ab186c3b.png"},528:function(t,v,_){t.exports=_.p+"assets/img/16d6779ad14c8389.dbc36e18.png"},726:function(t,v,_){"use strict";_.r(v);var e=_(11),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mysql-列数据类型-🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-列数据类型-🔥"}},[t._v("#")]),t._v(" MySQL 列数据类型 🔥")]),t._v(" "),e("h2",{attrs:{id:"数字类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数字类型"}},[t._v("#")]),t._v(" 数字类型")]),t._v(" "),e("h3",{attrs:{id:"整数（精确值）🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整数（精确值）🔥"}},[t._v("#")]),t._v(" 整数（精确值）🔥")]),t._v(" "),e("p",[t._v("很显然，使用的字节数越多，意味着能表示的数值范围就越大，但是也就越耗费存储空间。根据表示一个数占用字节数的不同，"),e("code",[t._v("MySQL")]),t._v("把整数划分成如下所示的类型：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("占用的字节")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("无符号数取值范围")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("有符号数取值范围")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TINYINT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 ~ 2⁸-1"),e("br"),t._v("0~255")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-2⁷ ~ 2⁷-1"),e("br"),t._v("-128~127")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非常小的整数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("标准 SQL："),e("code",[t._v("SMALLINT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 ~ 2¹⁶-1"),e("br"),t._v("0~65535")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-2¹⁵ ~ 2¹⁵-1"),e("br"),t._v("-32768~32767")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("小的整数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("MEDIUMINT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 ~ 2²⁴-1"),e("br"),t._v("0~16777215")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-2²³ ~ 2²³-1"),e("br"),t._v("-8388608~8388607")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("中等大小的整数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("标准 SQL："),e("code",[t._v("INT")]),t._v("或别名"),e("code",[t._v("INTEGER")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 ~ 2³²-1"),e("br"),t._v("0~4294967295")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-2³¹ ~ 2³¹-1"),e("br"),t._v("-2147483648~2147483647")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标准的整数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("BIGINT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 ~ 2⁶⁴-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-2⁶³ ~ 2⁶³-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("大整数")])])])]),t._v(" "),e("p",[t._v("以"),e("code",[t._v("TINYINT")]),t._v("为例，用 1 个字节，也就是 8 个位表示"),e("code",[t._v("有符号数")]),t._v("的话，就是既可以表示正数，也可以表示负数的话，需要有一个比特位表示正负号。但是如果表示"),e("code",[t._v("无符号数")]),t._v("的话，也就是只表示非负数的话，就不需要表示正负号，这是"),e("code",[t._v("有符号数")]),t._v("和"),e("code",[t._v("无符号数")]),t._v("的区别。")]),t._v(" "),e("p",[e("strong",[t._v("整数类型声明时如"),e("code",[t._v("TINYINT(11)")]),t._v("中11和占用字节无关，只是影响ZEROFILL，详细见DDL章节")])]),t._v(" "),e("h3",{attrs:{id:"浮点（不精确值）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浮点（不精确值）"}},[t._v("#")]),t._v(" 浮点（不精确值）")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("首先要明确：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("无理数概念：也称为"),e("strong",[t._v("无限不循环小数，不能写作两整数之比")]),t._v("。如 派，e 等。1/3 不是无理数！但是也不能用二进制表示")]),t._v(" "),e("p",[t._v("两有理数运算不会产生无理数（即使是 1/3）")])]),t._v(" "),e("li",[e("p",[t._v("待续...")])])])]),t._v(" "),e("h4",{attrs:{id:"引入-用二进制表示十进制小数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入-用二进制表示十进制小数"}},[t._v("#")]),t._v(" 引入—用二进制表示十进制小数")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("用二进制表示十进制小数")]),t._v(" "),e("p",[t._v("浮点数是用来表示小数的，我们平时用的十进制小数也可以被转换成二进制后被计算机存储。比如"),e("code",[t._v("9.875")]),t._v("，这个小数可以被表示成这样：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("9.875 = 8 + 1 + 0.5 + 0.25 + 0.125 = 1 × 2³ + 1 × 2⁰ + 1 × 2⁻¹ + 1 × 2⁻² + 1 × 2⁻³\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("也就是说，如果十进制小数"),e("code",[t._v("9.875")]),t._v("转换成二进制小数的话就是："),e("code",[t._v("1001.111")]),t._v("。为了在计算机里存储这种二进制小数，我们统一把它们表示成"),e("code",[t._v("a × 2ⁿ")]),t._v("的科学计数法的形式，其中 1≤"),e("code",[t._v("|a|")]),t._v("＜ 2（其首位数必然是 1，二进制嘛），比如"),e("code",[t._v("1001.111")]),t._v("可以被表示成"),e("code",[t._v("1.001111 × 2³")]),t._v("，我们把小数点之后的"),e("code",[t._v("001111")]),t._v("称为"),e("code",[t._v("尾数")]),t._v("，把"),e("code",[t._v("2³")]),t._v("中的"),e("code",[t._v("3")]),t._v("称为"),e("code",[t._v("指数")]),t._v("，然后"),e("strong",[t._v("只需要在计算机中的比特位中表示出"),e("code",[t._v("尾数")]),t._v("和"),e("code",[t._v("指数")]),t._v("就行了")]),t._v("。另外，小数也有正负之分，我们还需要单独的部分来表示小数的正负号。综上所述，表示一个浮点数需要下边几个部分：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("符号部分，占用 1 个比特位即可")]),t._v("。")]),t._v(" "),e("li",[e("strong",[t._v("尾数部分，视具体浮点数格式而定")]),t._v("。")]),t._v(" "),e("li",[e("strong",[t._v("指数部分，视具体浮点数格式而定")]),t._v("。")])])]),t._v(" "),e("h4",{attrs:{id:"浮点数类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浮点数类型"}},[t._v("#")]),t._v(" 浮点数类型")]),t._v(" "),e("p",[t._v("很显然，我们表示一个浮点数使用的字节数越多，表示"),e("code",[t._v("尾数")]),t._v("和"),e("code",[t._v("指数")]),t._v("的范围就越大，也就是说可以表示的小数范围就越大，设计"),e("code",[t._v("MySQL")]),t._v("的大叔根据表示一个小数需要的不同字节数定义了如下的两种浮点数类型：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("占用的存储空间（单位：字节）")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("绝对值最小非 0 值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("绝对值最大非 0 值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("±1.175494351E-38")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("±3.402823466E+38")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("单精度浮点数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DOUBLE")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("±2.2250738585072014E-308")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("±1.7976931348623157E+308")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("双精度浮点数")])])])]),t._v(" "),e("p",[t._v("以单精度浮点数类型"),e("code",[t._v("FLOAT")]),t._v("类型为例，它占用的 4 个字节的各个组成部分如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(523),alt:"img"}})]),t._v(" "),e("p",[t._v("另外需要注意的是，虽然有的十进制小数，比如"),e("code",[t._v("1.875")]),t._v("可以被很容易的转换成二进制数"),e("code",[t._v("1.111")]),t._v("，但是更多的小数是无法直接转换成二进制的，比如说"),e("code",[t._v("0.3")]),t._v("，它转换成的二进制小数就是一个无限小数，但是我们现在只能用 4 个字节或者 8 个字节来表示这个小数，所以只能进行一些舍入来近似的表示，所以我们说计算机的浮点数表示有时是"),e("strong",[t._v("不精确")]),t._v("的。")]),t._v(" "),e("h4",{attrs:{id:"设置最大位数和小数位数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置最大位数和小数位数"}},[t._v("#")]),t._v(" 设置最大位数和小数位数")]),t._v(" "),e("p",[t._v("在定义浮点数类型时，还可以在"),e("code",[t._v("FLOAT")]),t._v("或者"),e("code",[t._v("DOUBLE")]),t._v("后边跟上两个参数，就像这样：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("FLOAT(M, D)\nDOUBLE(M, D)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("对于我们用户而言，使用的都是十进制小数。如果我们事先知道表中的某个列要存储的小数在一定范围内，我们可以使用"),e("code",[t._v("FLOAT(M, D)")]),t._v("或者"),e("code",[t._v("DOUBLE(M, D)")]),t._v("来限制可以存储到本列中的小数范围。其中：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("M")]),t._v("表示该小数最多需要的十进制有效数字个数。")]),t._v(" "),e("p",[t._v("注意是"),e("code",[t._v("有效数字")]),t._v("个数，比方说对于小数"),e("code",[t._v("-2.3")]),t._v("来说有效数字个数就是 2，对于小数"),e("code",[t._v("0.9")]),t._v("来说有效数字个数就是"),e("code",[t._v("1")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("D")]),t._v("表示该小数的小数点后的十进制数字个数。")]),t._v(" "),e("p",[t._v("这个好理解，小数点后有几个十进制数字，"),e("code",[t._v("D")]),t._v("的值就是什么。")])])]),t._v(" "),e("p",[t._v("举个例子看一下，设置了"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("的单精度浮点数的取值范围的变化：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("取值范围")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT(4, 1)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-999.9~999.9")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT(5, 1)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-9999.9~9999.9")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT(6, 1)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-99999.9~99999.9")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT(4, 0)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-9999~9999")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT(4, 1)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-999.9~999.9")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("FLOAT(4, 2)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("-99.99~99.99")])])])]),t._v(" "),e("p",[t._v("可以看到，在 D 相同的情况下，M 越大，该类型的取值范围越大；在 M 相同的情况下，D 越大，该类型的取值范围越小。当然，"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("的取值也不是无限大的，"),e("code",[t._v("M")]),t._v("的取值范围是"),e("code",[t._v("1~255")]),t._v("，"),e("code",[t._v("D")]),t._v("的取值范围是"),e("code",[t._v("0~30")]),t._v("，而且"),e("code",[t._v("D")]),t._v("的值必须不大于"),e("code",[t._v("M")]),t._v("。"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("都是可选的，如果我们省略了它们，那它们的值按照机器支持的最大值来存储。")]),t._v(" "),e("h3",{attrs:{id:"定点（精确值）🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定点（精确值）🔥"}},[t._v("#")]),t._v(" 定点（精确值）🔥")]),t._v(" "),e("h4",{attrs:{id:"定点数类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定点数类型"}},[t._v("#")]),t._v(" 定点数类型")]),t._v(" "),e("p",[t._v("正因为用浮点数表示小数可能会有不精确的情况，在一些情况下我们必须保证小数是精确的，所以设计"),e("code",[t._v("MySQL")]),t._v("的大叔们提出一种称之为"),e("code",[t._v("定点数")]),t._v("的数据类型，它也是存储小数的一种方式：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("占用的存储空间（单位：字节）")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("取值范围")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DECIMAL(M, D)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("取决于 M 和 D")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("取决于 M 和 D")])])])]),t._v(" "),e("p",[t._v("此处的"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("的含义与浮点数中的含义一样。"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("对取值范围的影响我们之前在唠叨浮点数的时候已经介绍过了，但是我们又说单精度浮点数类型"),e("code",[t._v("FLOAT(M, D)")]),t._v("占用的字节数一直都是 4 字节，双精度浮点数"),e("code",[t._v("DOUBLE(M, D)")]),t._v("占用的字节数一直都是 8 字节，它们占用的存储空间大小并不随着 M 和 D 的值的变动而变动，为啥到了这个所谓的定点数类型"),e("code",[t._v("DECIMAL(M, D)")]),t._v("中，它占用的存储空间大小就和"),e("code",[t._v("M")]),t._v("、"),e("code",[t._v("D")]),t._v("的取值有关了呢？哈哈，回答这个问题还得且听我细细道来。")]),t._v(" "),e("h4",{attrs:{id:"分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),e("p",[t._v("我们说定点数是一种精确的小数，"),e("strong",[t._v("为了达到精确的目的")]),t._v("我们就"),e("strong",[t._v("不能把它转换成二进制小数之后再存储")]),t._v("(因为有很多十进制小数转为二进制小数后需要进行舍入操作，导致二进制小数表示的数值是不精确的，"),e("strong",[t._v("如 0.3")]),t._v(")。其实转念一想，所谓的小数只是把两个十进制整数用小数点分割开来而已，我们只要把小数点左右的两个十进制整数给存储起来，那不就是精确的了么。比方说对于十进制小数"),e("code",[t._v("2.38")]),t._v("来说，我们可以把这个小数的小数点左右的两个整数，也就是"),e("code",[t._v("2")]),t._v("和"),e("code",[t._v("38")]),t._v("分别保存起来，那么不就相当于保存了一个精确的小数么，这波操作是不是很 6。")]),t._v(" "),e("p",[t._v("当然事情并没有这么简单，对于给定"),e("code",[t._v("M")]),t._v("、"),e("code",[t._v("D")]),t._v("值的"),e("code",[t._v("DECIMAL(M, D)")]),t._v("类型，比如"),e("code",[t._v("DEMCIMAL(16, 4)")]),t._v("来说：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("首先确定小数点左边的整数最多需要存储的十进制位数是 12 位，小数点右边的整数需要存储的十进制位数是 4 位，如图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(524),alt:"img"}})])]),t._v(" "),e("li",[e("p",[t._v("从小数点位置出发，"),e("strong",[t._v("每个整数每隔 9 个十进制位划分为 1 组")]),t._v("，效果就是这样：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(525),alt:"img"}})]),t._v(" "),e("p",[t._v("从图中可以看出，"),e("strong",[t._v("如果不足 9 个十进制位，也会被划分成一组")]),t._v("。🔥")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("针对每个组中的十进制数字，将其转换为二进制数字进行存储")]),t._v("，根据组中包含的十进制数字位数不同，所需的存储空间大小也不同，具体见下表：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("组中包含的十进制位数")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("占用存储空间大小（单位：字节）")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1 或 2（0 ～ 9，0 ～ 99，下同）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3 或 4（0 ～ 999，9999，下同）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("5 或 6")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("7 或 8 或 9")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4")])])])]),t._v(" "),e("p",[t._v("所以"),e("code",[t._v("DECIMAL(16, 4)")]),t._v("共需要占用"),e("code",[t._v("8")]),t._v("个字节的存储空间大小，这 8 个字节由下边 3 个部分组成：")]),t._v(" "),e("ul",[e("li",[t._v("第 1 组包含 3 个十进制位，需要使用 2 个字节存储（这里是按照 16,4 划分的，别忘了！即使没有值也占用空间！）。")]),t._v(" "),e("li",[t._v("第 2 组包含 9 个十进制位，需要使用 4 个字节存储。")]),t._v(" "),e("li",[t._v("第 3 组包含 4 个十进制位，需要使用 2 个字节存储。")])])]),t._v(" "),e("li",[e("p",[t._v("将转换完成的比特位序列的最高位设置为 1？为啥。")])])]),t._v(" "),e("h4",{attrs:{id:"例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),e("p",[t._v("这些步骤看的有一丢丢懵逼吧，别着急，举个例子就都清楚了。比方说我们使用定点数类型"),e("code",[t._v("DECIMAL(16, 4)")]),t._v("来存储十进制小数"),e("code",[t._v("1234567890.1234")]),t._v("，这个小数会被划分成 3 个部分：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1 234567890 1234\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("也就是：")]),t._v(" "),e("ul",[e("li",[t._v("第 1 组中包含整数"),e("code",[t._v("1")]),t._v("。"),e("strong",[t._v("但是该组有 3 个十进制空间！")])]),t._v(" "),e("li",[t._v("第 2 组中包含整数"),e("code",[t._v("234567890")]),t._v("。该组有 9 个十进制空间")]),t._v(" "),e("li",[t._v("第 3 组中包含整数"),e("code",[t._v("1234")]),t._v("。该组有 4 个十进制空间")])]),t._v(" "),e("p",[t._v("然后将每一组中的十进制数字转换成对应的二进制数字：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("第 1 组占用 2 个字节，整数"),e("code",[t._v("1")]),t._v("对应的二进制数就是（字节之间实际上没有空格，只不过为了大家理解上的方便我们加了一个空格）（"),e("strong",[t._v("这里是按照 16,4 划分的，别忘了！即使没有值也占用空间！")]),t._v("）。：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("00000000 00000001\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("二进制看起来太难受，我们还是转换成对应的十六进制看一下：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("0x0001\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("第 2 组占用 4 个字节，整数"),e("code",[t._v("234567890")]),t._v("对应的十六进制数就是：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("0x0DFB38D2\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("第 3 组占用 2 个字节，整数"),e("code",[t._v("1234")]),t._v("对应的十六进制数就是：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("0x04D2\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])])]),t._v(" "),e("p",[t._v("所以将这些十六进制数字连起来之后就是：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("0x00010DFB38D204D2\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("最后还要将这个结果的最高位设置为 1，所以最终十进制小数"),e("code",[t._v("1234567890.1234")]),t._v("使用定点数类型"),e("code",[t._v("DECIMAL(16, 4)")]),t._v("存储时共占用 8 个字节，具体内容为：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("0x80010DFB38D204D2\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("有的同学会问，如果我们想使用定点数类型"),e("code",[t._v("DECIMAL(16, 4)")]),t._v("存储一个负数怎么办，比方说"),e("code",[t._v("-1234567890.1234")]),t._v("，这时只需要将"),e("code",[t._v("0x80010DFB38D204D2")]),t._v("中的每一个比特位都执行一个取反操作就好，也就是得到下边这个结果：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("0x7FFEF204C72DFB2D\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("从上边的叙述中我们可以知道，对于"),e("code",[t._v("DECIMAL(M, D)")]),t._v("类型来说，给定的"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("的值不同，所需的存储空间大小也不同。可以看到，与浮点数相比，定点数需要更多的空间来存储数据，所以如果不是在某些需要存储精确小数的场景下，一般的小数用浮点数表示就足够了。")]),t._v(" "),e("p",[t._v("对于定点数类型"),e("code",[t._v("DECIMAL(M, D)")]),t._v("来说，"),e("code",[t._v("M")]),t._v("和"),e("code",[t._v("D")]),t._v("都是可选的，默认的"),e("code",[t._v("M")]),t._v("的值是 10，默认的"),e("code",[t._v("D")]),t._v("的值是 0，也就是说下列等式是成立的：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("DECIMAL = DECIMAL(10) = DECIMAL(10, 0)\nDECIMAL(n) = DECIMAL(n, 0)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("另外"),e("code",[t._v("M")]),t._v("的范围是"),e("code",[t._v("1~65")]),t._v("，"),e("code",[t._v("D")]),t._v("的范围是"),e("code",[t._v("0~30")]),t._v("，且"),e("code",[t._v("D")]),t._v("的值不能超过"),e("code",[t._v("M")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"无符号数值类型-🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无符号数值类型-🔥"}},[t._v("#")]),t._v(" 无符号数值类型 🔥")]),t._v(" "),e("p",[t._v("对于数值类型，包括整数、浮点数和定点数，有些情况下我们只需要用到无符号数（就是非负数）。"),e("code",[t._v("MySQL")]),t._v("给我们提供了一个表示无符号数值类型的方式，就是在原数值类型后加一个单词"),e("code",[t._v("UNSIGNED")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("数值类型 UNSIGNED\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("大家可以把它当成一种新类型对待，比如"),e("code",[t._v("INT UNSIGNED")]),t._v("就表示无符号整数，"),e("code",[t._v("FLOAT UNSIGNED")]),t._v("表示无符号浮点数，"),e("code",[t._v("DECIMAL UNSIGNED")]),t._v("表示无符号定点数。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("在使用的存储空间大小相同的情况下，无符号整数可以表示的正整数范围比有符号整数能表示的正整数范围大一倍。不过受浮点数和定点数具体的存储格式影响，无符号浮点数和定点数并不能提升正数的表示范围。")])]),t._v(" "),e("h2",{attrs:{id:"日期和时间类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日期和时间类型"}},[t._v("#")]),t._v(" 日期和时间类型")]),t._v(" "),e("h3",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[e("code",[t._v("MySQL")]),t._v("为我们提供了多种关于时间和日期的类型，各种类型能表示的范围如下（版本更新后又变了）：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("存储空间要求（根据取值范围）")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("取值范围")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("YEAR")]),t._v("（不用？）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1901~2155")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("年份值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DATE")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'1000-01-01' ~ '9999-12-31'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TIME")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'-838:59:59' ~ '838:59:59'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("时间值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DATETIME")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("8 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'1000-01-01 00:00:00' ～ '9999-12-31 23:59:59'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期加时间值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TIMESTAMP")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'1970-01-01 00:00:01' ～ '2038-01-19 03:14:07'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("时间戳。若不给这个字段赋值，或赋值为 null，则默认使用当前系统时间")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("除了年月日之外，Oracle 中使用的 DATE 型还包含时分秒")])]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("MySQL5.6.4")]),t._v("这个版本之后，"),e("code",[t._v("TIME")]),t._v("、"),e("code",[t._v("DATETIME")]),t._v("、"),e("code",[t._v("TIMESTAMP")]),t._v("这几种类型添加了对毫秒、微秒的支持。由于毫秒、微秒都不到 1 秒，所以也被称为"),e("code",[t._v("小数秒")]),t._v("，"),e("code",[t._v("MySQL")]),t._v("最多支持 6 位小数秒的精度，各个位代表的意思如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(526),alt:"img"}})]),t._v(" "),e("p",[t._v("如果我们想让"),e("code",[t._v("TIME")]),t._v("、"),e("code",[t._v("DATETIME")]),t._v("、"),e("code",[t._v("TIMESTAMP")]),t._v("这几种类型支持小数秒，可以这样写：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("类型(小数秒位数)\n\n其中的小数秒位数可以在0、1、2、3、4、5、6中选择\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("比如"),e("code",[t._v("DATETIME(0)")]),t._v("表示精确到秒，"),e("code",[t._v("DATETIME(3)")]),t._v("表示精确到毫秒，"),e("code",[t._v("DATETIME(5)")]),t._v("表示精确到 10 微秒，"),e("code",[t._v("DATETIME(6)")]),t._v("表示精确到微秒。如果你在选择"),e("code",[t._v("TIME")]),t._v("、"),e("code",[t._v("DATETIME")]),t._v("、"),e("code",[t._v("TIMESTAMP")]),t._v("这几种类型的时候添加了对小数秒的支持，那么所需的存储空间需要相应的扩大，保留不同的小数秒位数，那么增加的存储空间大小也不同，如下表（同定点数需要空间一样，都是根据 10 进制位数计算出的）：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("保留的小数秒位数")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("额外需要的存储空间要")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1 或 2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1 字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3 或 4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2 字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("5 或 6")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3 字节")])])])]),t._v(" "),e("p",[t._v("也就是说如果你选择使用"),e("code",[t._v("DATETIME(1)")]),t._v("，那么需要的存储空间就是在"),e("code",[t._v("DATETIME")]),t._v("的空间上再加上小数秒需要的空间，就是"),e("code",[t._v("8 + 1 = 9")]),t._v("个字节，类似的，"),e("code",[t._v("DATETIME(3)")]),t._v("就需要"),e("code",[t._v("8 + 2 = 10")]),t._v("个字节。所以，"),e("code",[t._v("MySQL5.6.4")]),t._v("这个版本之后的各个类型需要的存储空间和取值范围就如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("存储空间要求（根据取值范围）")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("取值范围")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("YEAR")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1901~2155")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("年份值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DATE")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3 字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'1000-01-01' ~ '9999-12-31'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TIME")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3 字节+小数秒的存储空间")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'-838:59:59[.000000]' ~ '838:59:59[.000000]'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("时间值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DATETIME")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5 字节+小数秒的存储空间")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'1000-01-01 00:00:00[.000000]' ～ '9999-12-31 23:59:59'[.999999]")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("日期加时间值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TIMESTAMP")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4 字节+小数秒的存储空间")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'1970-01-01 00:00:01[.000000]' ～ '2038-01-19 03:14:07'[.999999]")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("时间戳。若不给这个字段赋值，或赋值为 null，则默认使用当前系统时间")])])])]),t._v(" "),e("p",[t._v("大家应该发现其中的"),e("strong",[t._v("在没有存储小数秒的情况下，"),e("code",[t._v("DATETIME")]),t._v("类型占用的存储空间从原来的 8 字节变成了 5 字节")]),t._v("，这是因为设计"),e("code",[t._v("MySQL")]),t._v("的大叔背后做了些努力，使"),e("strong",[t._v("存储格式变得更紧凑了")]),t._v("些（在"),e("code",[t._v("MySQL5.6.4")]),t._v("这个版本之后）。")]),t._v(" "),e("h3",{attrs:{id:"year"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#year"}},[t._v("#")]),t._v(" YEAR")]),t._v(" "),e("p",[e("code",[t._v("YEAR")]),t._v("类型也可以写成"),e("code",[t._v("YEAR(4)")]),t._v("，它单纯表示一个年份值，取值范围为"),e("code",[t._v("1901 ～ 2155")]),t._v("，仅仅占用 1 个字节大小而已。因为可以存储的年份值有限，如果我们想存储更大范围的年份值，可以不使用"),e("code",[t._v("MySQL")]),t._v("自带的"),e("code",[t._v("YEAR")]),t._v("类型，换成"),e("code",[t._v("SMALLINT")]),t._v("（2 字节）或者字符串类型啥的都可以。")]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： 曾经也有 YEAR(2)这种使用 2 个数字来表示年份的类型，比方说数字 99 表示 1999 年。不过在 MySQL 5.7.5 之后就不再支持这种类型了，我们稍微了解一下就好了。")])]),t._v(" "),e("h3",{attrs:{id:"date、time-和-datetime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date、time-和-datetime"}},[t._v("#")]),t._v(" DATE、TIME 和 DATETIME")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("DATE")]),t._v("表示日期，格式是"),e("code",[t._v("YYYY-MM-DD")]),t._v("；")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("TIME")]),t._v("表示时间，格式是"),e("code",[t._v("hh:mm:ss[.uuuuuu]")]),t._v("或者"),e("code",[t._v("hhh:mm:ss[.uuuuuu]")]),t._v("（有时候要存储的小时值是三位数）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("DATETIME")]),t._v("表示日期+时间，格式是"),e("code",[t._v("YYYY-MM-DD hh:mm:ss[.uuuuuu]")]),t._v("。其中的"),e("code",[t._v("YYYY")]),t._v("、"),e("code",[t._v("MM")]),t._v("、"),e("code",[t._v("DD")]),t._v("、"),e("code",[t._v("hh")]),t._v("、"),e("code",[t._v("mm")]),t._v("、"),e("code",[t._v("ss")]),t._v("、"),e("code",[t._v("uuuuuu")]),t._v("分别表示年、月、日、时、分、秒、小数秒。")])])]),t._v(" "),e("p",[t._v("需要注意的是，"),e("strong",[t._v("DATETIME")]),t._v("中的时间部分表示的是一天内的时间(00:00:00 ~ 23:59:59)，"),e("strong",[t._v("而 TIME 表示的是一段时间，而且可以表示负值（可用于存储计时）")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"timestamp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timestamp"}},[t._v("#")]),t._v(" TIMESTAMP")]),t._v(" "),e("p",[e("code",[t._v("1970-01-01 00:00:00")]),t._v("注定是一个特殊的时刻，我们把某个时刻距离"),e("code",[t._v("1970-01-01 00:00:00")]),t._v("的秒数称为"),e("code",[t._v("时间戳")]),t._v("。比方说当前时间是"),e("code",[t._v("2018-01-24 11:39:21")]),t._v("，距离"),e("code",[t._v("1970-01-01 00:00:00")]),t._v("的秒数为"),e("code",[t._v("1516765161")]),t._v("，那么"),e("code",[t._v("2018-01-24 11:39:21")]),t._v("这个时刻的时间戳就是"),e("code",[t._v("1516765161")]),t._v("。不过在"),e("code",[t._v("MySQL5.6.4")]),t._v("之后，时间戳的值也可以加入小数秒。")]),t._v(" "),e("p",[t._v("用时间戳存储时间的好处就是，它展示的值可以随着时区的变化而变化。比方说我们把"),e("code",[t._v("2018-01-24 11:39:21")]),t._v("这个时刻存储到一个"),e("code",[t._v("TIMESTAMP")]),t._v("的列中，那么在中国你看到的时间就是"),e("code",[t._v("2018-01-24 11:39:21")]),t._v("，如果你去了日本，他们哪里的使用的是东京时间，比北京时间早一个小时，所以他们那显示的就是"),e("code",[t._v("2018-01-24 12:39:21")]),t._v("。而如果你用"),e("code",[t._v("DATETIME")]),t._v("存储"),e("code",[t._v("2018-01-24 11:39:21")]),t._v("的话，那不同时区看到的时间值都是一样的。")]),t._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[e("strong",[t._v("需要存储精确类型，可以使用 INT（BIGINT） UNSIGNED 存储时间戳即可")])]),t._v(" "),e("h2",{attrs:{id:"字符串类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[t._v("#")]),t._v(" 字符串类型")]),t._v(" "),e("h3",{attrs:{id:"字符和字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符和字符串"}},[t._v("#")]),t._v(" 字符和字符串")]),t._v(" "),e("p",[e("code",[t._v("字符")]),t._v("可以大致分为两种，一种叫"),e("code",[t._v("可见字符")]),t._v("，一种叫"),e("code",[t._v("不可见字符")]),t._v("。顾名思义，"),e("code",[t._v("可见字符")]),t._v("就是打印出来后能看见的字符。比如"),e("code",[t._v("'a'")]),t._v("，"),e("code",[t._v("'b'")]),t._v("，"),e("code",[t._v("'我'")]),t._v("，"),e("code",[t._v("'。'")]),t._v(" ... 这样的人眼能看见的单个的国家文字、标点符号、图形符号、数字等这样的东东，我们就叫做一个"),e("code",[t._v("可见字符")]),t._v("。"),e("code",[t._v("不可见字符")]),t._v("也好理解，就是打印机或者在黑框框里打印字符的时候有时候需要换行，打个制表符啥的，或者在输出某个字符的时候就发出"),e("code",[t._v("嘟")]),t._v("地一声，这种我们看不到，只是为了控制输出效果的字符叫做"),e("code",[t._v("不可见字符")]),t._v("。"),e("code",[t._v("字符串")]),t._v("就是把字符连起来的样子，比如"),e("code",[t._v("'abc'")]),t._v("，就是由"),e("code",[t._v("'a'")]),t._v("、"),e("code",[t._v("'b'")]),t._v("、"),e("code",[t._v("'c'")]),t._v("三个字符连起来的一个"),e("code",[t._v("字符串")]),t._v("，下边列举了 4 个字符串的例子：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("'我喜欢你'\n'me, too'\n'give me a hug'\n'么么哒'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h3",{attrs:{id:"字符编码简介-🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符编码简介-🔥"}},[t._v("#")]),t._v(" 字符编码简介 🔥")]),t._v(" "),e("p",[t._v("在具体分析"),e("code",[t._v("MySQL")]),t._v("中各个字符串类型之前，我们一定要先搞明白字符和字节的区别。字符是面向人的概念，字节是面向计算机的概念。如果你想在计算机中表示字符，那就需要将该字符与一个特定的字节序列对应起来，这个映射过程称之为"),e("code",[t._v("编码")]),t._v("。不幸的是，这种映射关系并不是唯一的，不同的人制作了不同的编码方案，根据表示一个字符使用的字节数量是不是固定的，编码方案可以分为下边两种：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("固定长度的编码方案")]),t._v(" "),e("p",[t._v("表示不同的字符所需要的字节数量是相同的。比方说"),e("code",[t._v("ASCII")]),t._v("编码方案采用 1 个字节来编码一个字符，"),e("code",[t._v("ucs2")]),t._v("采用 2 个字节来编码一个字符。")])]),t._v(" "),e("li",[e("p",[t._v("变长的编码方案")]),t._v(" "),e("p",[t._v("表示不同的字符所需要的字节数量是不同的。比方说"),e("code",[t._v("utf8")]),t._v("编码方案采用"),e("code",[t._v("1~3")]),t._v("个字节来编码一个字符，"),e("code",[t._v("gb2312")]),t._v("采用"),e("code",[t._v("1~2")]),t._v("个字节来编码一个字符。")])])]),t._v(" "),e("p",[t._v("对于不同的字符编码方案来说，同一个字符可能被编码成不同的字节序列。比如同样一个字符："),e("code",[t._v("我")]),t._v("，在"),e("code",[t._v("utf8")]),t._v("和"),e("code",[t._v("gb2312")]),t._v("这两种编码方案下被映射成如下的字节序列：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("utf8 编码方案")]),t._v(" "),e("p",[t._v("字符"),e("code",[t._v("'我'")]),t._v("被编码成：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("111001101000100010010001\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("共占用 3 个字节，用十六进制表示就是："),e("code",[t._v("0xE68891")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("gb2312 编码方案")]),t._v(" "),e("p",[t._v("字符"),e("code",[t._v("'我'")]),t._v("被编码成：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1100111011010010\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("共占用 2 个字节，用十六进制表示就是："),e("code",[t._v("0xCED2")]),t._v("。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： 注：十六进制前边的 0x 是前缀，表示后边的是 16 进制数据。")])]),t._v(" "),e("p",[t._v("另外，设计 MySQL 的大叔似乎对"),e("code",[t._v("编码方案")]),t._v("和"),e("code",[t._v("字符集")]),t._v("这两个概念并没做什么区分，也就是说我们之后所讲的"),e("code",[t._v("utf8")]),t._v("字符集指的就是"),e("code",[t._v("utf8")]),t._v("编码方案，"),e("code",[t._v("gb2312")]),t._v("字符集指的也就是"),e("code",[t._v("gb2312")]),t._v("编码方案。")]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： 正宗的 utf8 字符集是使用 1~4 个字节来编码一个字符的，不过 MySQL 中对 utf8 字符集做了阉割，编码一个字符最多使用 3 个字节。如果我们之后有存储使用 4 个字节来编码的字符的情景，可以使用一种称之为"),e("strong",[t._v("utf8mb4 的字符集，它才是正宗的 utf8 字符集")]),t._v("。")])]),t._v(" "),e("h3",{attrs:{id:"字符串类型总览-🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型总览-🔥"}},[t._v("#")]),t._v(" 字符串类型总览 🔥")]),t._v(" "),e("p",[t._v("现在我们可以看一下"),e("code",[t._v("MySQL")]),t._v("中提供的各种字符串类型（注：其中"),e("code",[t._v("M")]),t._v("代表该数据类型最多能存储的字符数量，"),e("code",[t._v("L")]),t._v("代表我们实际向该类型的属性中存储的字符串在特定字符集下所占的字节数，"),e("code",[t._v("W")]),t._v("代表在该特定字符集下，编码一个字符最多需要的字节数）：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("最大长度")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("存储空间要求")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("CHAR(M)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("M 个字符")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("M×W 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("固定长度的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("VARCHAR(M)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("M 个字符")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("L+1 或 L+2 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可变长度的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TINYTEXT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2⁸-1 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("L+1 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非常小型的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TEXT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2¹⁶-1 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("L+2 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("小型的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("MEDIUMTEXT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2²⁴-1 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("L+3 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("中等大小的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("LONGTEXT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2³²-1 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("L+4 个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("大型的字符串")])])])]),t._v(" "),e("p",[t._v("当然，就画这么个表格大家一准儿有些懵，我们接下来看一下各种字符串类型的细节。")]),t._v(" "),e("h3",{attrs:{id:"char-m"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#char-m"}},[t._v("#")]),t._v(" CHAR(M)")]),t._v(" "),e("p",[t._v("总结："),e("strong",[t._v("固定长度字符串类型，数据的长度不足指定长度，补空格到指定长度！取出时再把“右侧”空格删掉（即右侧本身有空格，则会丢失")])]),t._v(" "),e("p",[e("code",[t._v("CHAR(M)")]),t._v("中的"),e("code",[t._v("M")]),t._v("代表该类型最多可以存储的"),e("strong",[t._v("字符数量")]),t._v("，注意，是字符数量，"),e("strong",[t._v("不是字节数量")]),t._v("。"),e("strong",[t._v("其中"),e("code",[t._v("M")]),t._v("的取值范围是"),e("code",[t._v("0~255")])]),t._v("。如果省略掉"),e("code",[t._v("M")]),t._v("的值，那它的默认值就是 1，也就是说"),e("code",[t._v("CHAR")]),t._v("和"),e("code",[t._v("CHAR(1)")]),t._v("是一个意思。"),e("code",[t._v("CHAR(0)")]),t._v("是一种特别的类型，它只能存储空字符串"),e("code",[t._v("''")]),t._v("或者"),e("code",[t._v("NULL")]),t._v("值（我们后边会详细介绍啥是个"),e("code",[t._v("NULL")]),t._v("）。再回头看一眼我们的学生基本信息表，如果你觉得学生的姓名不会超过 5 个字符，你就可以指定这个姓名列的类型为"),e("code",[t._v("CHAR(5)")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("CHAR(M)")]),t._v("在不同的字符集下需要的存储空间也是不一样的，我们假设某个字符集编码一个字符最多需要"),e("code",[t._v("W")]),t._v("个字节，那么类型"),e("code",[t._v("CHAR(M)")]),t._v("占用的存储空间大小就是"),e("code",[t._v("M×W")]),t._v("个字节。比方说：")]),t._v(" "),e("ul",[e("li",[t._v("对于采用"),e("code",[t._v("ascii")]),t._v("字符集的"),e("code",[t._v("CHAR(5)")]),t._v("类型来说，"),e("code",[t._v("ascii")]),t._v("字符集编码一个字符最多需要 1 个字节，也就是"),e("code",[t._v("M=5")]),t._v("、"),e("code",[t._v("W=1")]),t._v("，所以这种情况下该类型占用的存储空间大小就是"),e("code",[t._v("5×1 = 5")]),t._v("个字节。")]),t._v(" "),e("li",[t._v("对于采用"),e("code",[t._v("gbk")]),t._v("字符集的"),e("code",[t._v("CHAR(5)")]),t._v("类型来说，"),e("code",[t._v("gbk")]),t._v("字符集编码一个字符最多需要 2 个字节，也就是"),e("code",[t._v("M=5")]),t._v("、"),e("code",[t._v("W=2")]),t._v("，所以这种情况下该类型占用的存储空间大小就是"),e("code",[t._v("5×2 = 10")]),t._v("个字节。")]),t._v(" "),e("li",[t._v("对于采用"),e("code",[t._v("utf8")]),t._v("字符集的"),e("code",[t._v("CHAR(5)")]),t._v("类型来说，"),e("code",[t._v("utf8")]),t._v("字符集编码一个字符最多需要 3 个字节，也就是"),e("code",[t._v("M=5")]),t._v("、"),e("code",[t._v("W=3")]),t._v("，所以这种情况下该类型占用的存储空间大小就是"),e("code",[t._v("5×3 = 15")]),t._v("个字节。")])]),t._v(" "),e("p",[t._v("如果我们实际存储的字符串在特定字符集编码下占用的字节数不足"),e("code",[t._v("M×W")]),t._v("，那么剩余的那些存储空间用空格字符（也就是："),e("code",[t._v("' '")]),t._v("）补齐。比方说表的某个属性的类型是采用"),e("code",[t._v("ascii")]),t._v("字符集的"),e("code",[t._v("CHAR(5)")]),t._v("类型，我们想将字符串"),e("code",[t._v("'abc'")]),t._v("存入使用这个类型的表属性中，其中字符串"),e("code",[t._v("'abc'")]),t._v("在"),e("code",[t._v("ascii")]),t._v("字符集下需要 3 个字节存储，而采用"),e("code",[t._v("ascii")]),t._v("字符集的"),e("code",[t._v("CHAR(5)")]),t._v("类型又需要 5 个字节的存储空间，那么剩下的那两个字节的存储空间就会存储空格字符"),e("code",[t._v("' '")]),t._v("的编码。这也就是说：一旦你确定了 CHAR(M)类型的 M 的值，如果 M 的值很大，而你实际存储的字符串占用字节数又很少，会造成存储空间的浪费。")]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： 字符'a'在 ascii 字符集下被编码为 0x61，字符'b'在 ascii 字符集下被编码为 0x62，字符'c'在 ascii 字符集下被编码为 0x63，空格字符被编码为 0x20，所以将字符串'abc'存入采用 ascii 字符集的 CHAR(5)类型的表属性中时，实际存储的字节序列就是：0x6162632020。")])]),t._v(" "),e("h3",{attrs:{id:"varchar-m"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#varchar-m"}},[t._v("#")]),t._v(" VARCHAR(M)")]),t._v(" "),e("p",[t._v("总结："),e("strong",[t._v("可变长度字符串类型")]),t._v("（+1 或+2 字节）")]),t._v(" "),e("p",[t._v("如果你表中的某个列需要存储字符串类型的数据，而且这些字符串长短不一，那么使用"),e("code",[t._v("CHAR(M)")]),t._v("可能会浪费很多存储空间，"),e("code",[t._v("VARCHAR(M)")]),t._v("正是为了解决这个问题而生的。")]),t._v(" "),e("p",[e("code",[t._v("VARCHAR(M)")]),t._v("中的"),e("code",[t._v("M")]),t._v("也是代表该类型最多可以存储的字符数量，理论上的取值范围是"),e("code",[t._v("1~65535")]),t._v("。但是"),e("code",[t._v("MySQL")]),t._v("中还有一个规定，"),e("strong",[t._v("表中某一行包含的所有列中存储的数据大小总共不得超过 65535 个字节")]),t._v("（注意是字节），也就是说"),e("code",[t._v("VARCHAR(M)")]),t._v("类型实际能够容纳的字符数量是小于 65535 的。"),e("strong",[t._v("按照 "),e("code",[t._v("utf-8 mb4")]),t._v("存储，最多 65536/3 个数的字符")]),t._v("。🔥")]),t._v(" "),e("p",[e("code",[t._v("VARCHAR(M)")]),t._v("类型占用的存储空间不确定，那系统在读一个"),e("code",[t._v("VARCHAR(M)")]),t._v("类型的数据时怎么知道该数据占用多少个字节呢？答案是：不知道。所以一个"),e("code",[t._v("VARCHAR(M)")]),t._v("类型表示的数据其实是由这么"),e("strong",[t._v("两部分组成")]),t._v("：")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("真正的字符串内容")]),t._v("。")]),t._v(" "),e("p",[t._v("假设真正的字符串在特定字符集编码后占用的字节数为"),e("code",[t._v("L")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("占用字节数")]),t._v("。")]),t._v(" "),e("p",[t._v("假设"),e("code",[t._v("VARCHAR(M)")]),t._v("类型采用的字符集编码一个字符最多需要"),e("code",[t._v("W")]),t._v("个字节，那么：")]),t._v(" "),e("ul",[e("li",[t._v("当"),e("code",[t._v("M×W < 256")]),t._v("时，只需要一个字节来表示占用的字节数。")]),t._v(" "),e("li",[t._v("当"),e("code",[t._v("M×W >= 256")]),t._v("且"),e("code",[t._v("M×W < 65536")]),t._v("时，需要两个字节来表示占用的字节数。")])]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： 一个字节占用 8 个比特位，能表示的最大无符号数就是 255，两个字节占用 16 个比特位，能表示的最大无符号数就是 65535。")])])])]),t._v(" "),e("p",[t._v("我们还用学生的姓名属性做例子，假设我们给姓名列定义的类型为采用"),e("code",[t._v("utf8")]),t._v("字符集的"),e("code",[t._v("VARCHAR(5)")]),t._v("，也就是说"),e("code",[t._v("M = 5")]),t._v("、"),e("code",[t._v("W = 3")]),t._v("，所以"),e("code",[t._v("M × W= 5×3 = 15")]),t._v("，而"),e("code",[t._v("15 < 256")]),t._v("，所以我们只需要一个字节来表示真实数据占用的字节长度就好了。对于"),e("code",[t._v("'杜子腾'")]),t._v("和"),e("code",[t._v("'范统'")]),t._v("这两个字符串来说，它们在"),e("code",[t._v("utf8")]),t._v("字符集下可以被编码成如下的样子(二进制太长了，用 16 进制表示)：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("'杜子腾'：0xE69D9CE5AD90E885BE （共9个字节）\n'范统'：0xE88C83E7BB9F （共6个字节）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("那么这两个字符串的实际存储示意图就是这样：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(527),alt:"img"}})]),t._v(" "),e("p",[t._v("而如果我们给姓名列定义的类型为采用"),e("code",[t._v("utf8")]),t._v("字符集的"),e("code",[t._v("VARCHAR(100)")]),t._v("，也就是说"),e("code",[t._v("M = 100")]),t._v("、"),e("code",[t._v("W = 3")]),t._v("，所以"),e("code",[t._v("M × W= 100×3 = 300")]),t._v("，而"),e("code",[t._v("300 > 256")]),t._v("，所以我们需要 2 个字节来表示真实数据占用的字节长度，此时"),e("code",[t._v("'杜子腾'")]),t._v("和"),e("code",[t._v("'范统'")]),t._v("这两个字符串的实际存储示意图就是这样：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(528),alt:"img"}})]),t._v(" "),e("p",[t._v("从上边的示例中可以看出，"),e("code",[t._v("VARCHAR(M)")]),t._v("类型占用的存储空间大小随着实际存储的内容变化而变化，假设实际存储的内容占用的字节长度为"),e("code",[t._v("L")]),t._v("，那么整个"),e("code",[t._v("VARCHAR(M)")]),t._v("类型占用的存储空间大小就"),e("strong",[t._v("是"),e("code",[t._v("L+1")]),t._v("或者"),e("code",[t._v("L+2")]),t._v("个字节")]),t._v("。所以我们说"),e("strong",[t._v("VARCHAR(M)"),e("strong",[t._v("是一种")]),t._v("可变长度")]),t._v("的字符串类型。")]),t._v(" "),e("blockquote",[e("p",[t._v("Oracle 中使用 VARCHAR2 型 ( MySQL 中也有 VARCHAR2 这种数据类型，但并不推荐使用)")])]),t._v(" "),e("h3",{attrs:{id:"char-vs-varchar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#char-vs-varchar"}},[t._v("#")]),t._v(" CHAR VS VARCHAR")]),t._v(" "),e("ul",[e("li",[t._v("char长度固定，不需要考虑边界问题，读写效率高于varchar，适合存储长度固定（不太多）、频繁读写的数据")]),t._v(" "),e("li",[t._v("varchar长度不固定，但可以通过varchar(m)的方式指定上限，适合存储长度波动、更新不频繁的数据")]),t._v(" "),e("li",[t._v("char的存储长度不够灵活，而varchar则需要浪费1~2个字节来存储当前值的实际长度，且更新会导致重新计算")])]),t._v(" "),e("p",[t._v("没有最完美的类型，只有最合适的类型。比如，当你需要存储手机号码或者身份证号时，用char(11)、char(18)显然更合适。但存储“个人介绍”时，用varchar更好，因为个人介绍的长度是可变的且长度可能很长。")]),t._v(" "),e("p",[t._v("优化：")]),t._v(" "),e("ul",[e("li",[t._v("可以采取定长、变长分表")]),t._v(" "),e("li",[t._v("常用列与不常用列分表")])]),t._v(" "),e("h3",{attrs:{id:"各种-text（或称-clob）类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各种-text（或称-clob）类型"}},[t._v("#")]),t._v(" 各种 TEXT（或称 CLOB）类型")]),t._v(" "),e("p",[t._v("虽然"),e("code",[t._v("VARCHAR(M)")]),t._v("已经可以存储很长的字符串了，可是有时候还是不够咋办？对于很长的字符串，设计"),e("code",[t._v("MySQL")]),t._v("的大叔们给我们提供了"),e("code",[t._v("TINYTEXT")]),t._v("、"),e("code",[t._v("TEXT")]),t._v("、"),e("code",[t._v("MEDIUMTEXT")]),t._v("、"),e("code",[t._v("LONGTEXT")]),t._v("四种可以存储大型的字符串的类型。它们也都是"),e("strong",[t._v("变长类型")]),t._v("，也就是说这些类型"),e("strong",[t._v("占用的存储空间")]),t._v("由"),e("strong",[t._v("实际内容")]),t._v("和"),e("strong",[t._v("内容占用的字节长度")]),t._v("两部分构成。")]),t._v(" "),e("ul",[e("li",[t._v("因为"),e("code",[t._v("TINYTEXT")]),t._v("最多可以存储"),e("code",[t._v("2⁸-1")]),t._v("个字节，所以内容占用的**字节长度（不是内容长度）**用 1 个字节就可以表示")]),t._v(" "),e("li",[e("code",[t._v("TEXT")]),t._v("最多可以存储"),e("code",[t._v("2¹⁶-1")]),t._v("个字节，所以内容占用的字节长度用 2 个字节就可以表示。")]),t._v(" "),e("li",[e("code",[t._v("MEDIUMTEXT")]),t._v("最多可以存储"),e("code",[t._v("2²⁴-1")]),t._v("个字节，所以内容占用的字节长度用 3 个字节就可以表示。")]),t._v(" "),e("li",[e("code",[t._v("LONGTEXT")]),t._v("最多可以存储"),e("code",[t._v("2³²-1")]),t._v("个字节，所以内容占用的字节长度用 4 个字节就可以表示。")])]),t._v(" "),e("p",[t._v("因此，变长为 1、2、3、4 字节")]),t._v(" "),e("p",[t._v("不过之前不是有个规定说"),e("strong",[t._v("某一行包含的所有列中存储的数据大小总和不得超过 65535 个字节")]),t._v("么？"),e("strong",[t._v("这个规定对这些 TEXT 类型是不起作用的")]),t._v("，它们并不在这个规定的限制范围之内。一个表中如果有的属性需要存储特别长的文本的话，就可以考虑使用这几个类型了。")]),t._v(" "),e("h2",{attrs:{id:"enum-类型和-set-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enum-类型和-set-类型"}},[t._v("#")]),t._v(" ENUM 类型和 SET 类型")]),t._v(" "),e("p",[t._v("视角回到我们的学生信息表，性别一列也需要填写字符串，但是比较特殊的一点是，这一列只能填"),e("code",[t._v("男")]),t._v("或者"),e("code",[t._v("女")]),t._v("，填别的字符串就尴尬了！针对这种情况，我们提出了一个叫"),e("code",[t._v("ENUM")]),t._v("的类型，也称为"),e("code",[t._v("枚举类型")]),t._v("，它的格式如下：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ENUM('str1', 'str2', 'str3' ⋯)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("它表示在给定的字符串列表里选择一个。比如我们的性别一列可以定义成"),e("code",[t._v("ENUM('男', '女')")]),t._v("类型。这个的意思就是性别一列只能在"),e("code",[t._v("'男'")]),t._v("或者"),e("code",[t._v("'女'")]),t._v("这两个字符串之间选择一个，相当于一个单选框～")]),t._v(" "),e("p",[t._v("有的时候某一列的值可以在给定的字符串列表中挑选多个，假设学生的基本信息加了一列"),e("code",[t._v("兴趣")]),t._v("属性，这个属性的值可以从给定的兴趣列表中挑选多个，那我们可以使用"),e("code",[t._v("SET")]),t._v("类型，它的格式如下：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SET('str1', 'str2', 'str3' ⋯)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("它表示可以在给定的字符串列表里选择多个。我们的兴趣一列就可以定义成"),e("code",[t._v("SET('打球', '画画', '扯犊子', '玩游戏')")]),t._v("类型。这个的意思就是兴趣一列可以在给定的这几个字符串中选择一个或多个，相当于一个多选框～效果就像这样：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("学号")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("姓名")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("···")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("兴趣")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("20180101")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("杜子腾")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("···")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'打球', '画画'")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("20180102")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("杜琦燕")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("···")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'扯犊子'")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("20180103")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("范统")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("···")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'扯犊子', '玩游戏'")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("20180104")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("史珍香")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("···")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'画画', '扯犊子', '玩游戏'")])])])]),t._v(" "),e("p",[t._v("综上所述，ENUM 和 SET 类型都是一种特殊的字符串类型，在"),e("strong",[t._v("从字符串列表中单选或多选元素的时候会用得到它们")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"二进制类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制类型"}},[t._v("#")]),t._v(" 二进制类型")]),t._v(" "),e("h3",{attrs:{id:"bit-类型-🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bit-类型-🔥"}},[t._v("#")]),t._v(" BIT 类型 🔥")]),t._v(" "),e("p",[t._v("有时候我们有存储单个或者多个比特位的需求，此时就可以用到下边这种类型：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("字节数")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("BIT(M)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("近似为(M+7)/8")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("存储 M 个比特位的值")])])])]),t._v(" "),e("p",[t._v("其中"),e("code",[t._v("M")]),t._v("的取值范围为"),e("code",[t._v("1~64")]),t._v("，而且"),e("code",[t._v("M")]),t._v("可以省略，它的默认值为 1，也就是说"),e("code",[t._v("BIT(1)")]),t._v("和"),e("code",[t._v("BIT")]),t._v("的意思是一样的。")]),t._v(" "),e("p",[e("code",[t._v("MySQL")]),t._v("是"),e("strong",[t._v("以字节为单位存储数据")]),t._v("的，一个字节拥有 8 个比特位。如果我们想存储的比特位个数不足整数个字节，那么"),e("code",[t._v("MySQL")]),t._v("会"),e("strong",[t._v("偷偷的填充满")]),t._v("，比方说：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("BIT(1)")]),t._v("类型仅仅需要存储 1 个比特位的数据，但是"),e("code",[t._v("MySQL")]),t._v("会为其申请"),e("code",[t._v("(1+7)/8 = 1")]),t._v("个字节。")]),t._v(" "),e("li",[e("code",[t._v("BIT(5)")]),t._v("类型仅仅需要存储 5 个比特位的数据，但是"),e("code",[t._v("MySQL")]),t._v("会为其申请"),e("code",[t._v("(5+7)/8 = 1")]),t._v("个字节。")]),t._v(" "),e("li",[e("code",[t._v("BIT(9)")]),t._v("类型仅仅需要存储 9 个比特位的数据，但是"),e("code",[t._v("MySQL")]),t._v("会为其申请"),e("code",[t._v("(9+7)/8 = 2")]),t._v("个字节。")])]),t._v(" "),e("p",[t._v("据此来说，也没有必要对类似 status 使用该类型")]),t._v(" "),e("h3",{attrs:{id:"binary-m-与-varbinary-m"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binary-m-与-varbinary-m"}},[t._v("#")]),t._v(" BINARY(M)与 VARBINARY(M)")]),t._v(" "),e("p",[e("code",[t._v("BINARY(M)")]),t._v("和"),e("code",[t._v("VARBINARY(M)")]),t._v("对应于我们前边提到的"),e("code",[t._v("CHAR(M)")]),t._v("和"),e("code",[t._v("VARCHAR(M)")]),t._v("，都是前者是固定长度的类型，后者是可变长度的类型，只不过"),e("code",[t._v("BINARY(M)")]),t._v("和"),e("code",[t._v("VARBINARY(M)")]),t._v("是用来存放"),e("strong",[t._v("字节")]),t._v("的，其中的"),e("code",[t._v("M")]),t._v("代表该类型最多能存放的字节数量，而"),e("code",[t._v("CHAR(M)")]),t._v("和"),e("code",[t._v("VARCHAR(M)")]),t._v("是用来存储"),e("strong",[t._v("字符")]),t._v("的，其中的"),e("code",[t._v("M")]),t._v("代表该类型最多能存放的字符数量。")]),t._v(" "),e("h3",{attrs:{id:"各种-blob-类型-☠️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各种-blob-类型-☠️"}},[t._v("#")]),t._v(" 各种 BLOB 类型 ☠️")]),t._v(" "),e("p",[e("code",[t._v("TINYBLOB")]),t._v("、"),e("code",[t._v("BLOB")]),t._v("、"),e("code",[t._v("MEDIUMBLOB")]),t._v("、"),e("code",[t._v("LONGBLOB")]),t._v("是针对数据量很大的二进制数据提出的，比如图片、音频、压缩文件啥的。它们很像"),e("code",[t._v("TINYTEXT")]),t._v("、"),e("code",[t._v("TEXT")]),t._v("、"),e("code",[t._v("MEDIUMTEXT")]),t._v("、"),e("code",[t._v("LONGTEXT")]),t._v("，不过各种"),e("code",[t._v("BLOB")]),t._v("类型是用来存储字节的，而各种"),e("code",[t._v("TEXT")]),t._v("类型是用来存储字符的而已。")]),t._v(" "),e("ul",[e("li",[t._v("tinyblob(2^ 8-1B)")]),t._v(" "),e("li",[t._v("blob(2^ 16-1B)")]),t._v(" "),e("li",[t._v("mediumblob(2^ 24-1B)")]),t._v(" "),e("li",[t._v("longblob(2^32-1B)")])]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： 对于比较大的二进制数据，比方说图片、音频、压缩文件什么的，通常情况下都不直接存储到数据库管理系统中，而是将它们"),e("strong",[t._v("保存到文件系统")]),t._v("中，然后"),e("strong",[t._v("在数据库中之存放一个文件路径即可")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"注意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),e("blockquote",[e("p",[t._v("小贴士： MySQL 其实可以大致被分为 server 层和存储引擎层，server 层用来做一些通用的逻辑，存储引擎层负责具体的数据读取和存储，针对不同的使用场景设计了许多种不同的存储引擎。各种数据类型在 server 层的格式是一致的，本文对各种数据类型占用存储空间的分析也是基于 server 层的，不同的存储引擎针对不同的数据类型可能有其特定的实现，我们就不单独唠叨了。在《MySQL 是怎样运行的：从根儿上理解 MySQL》这本书中介绍了 InnoDB 存储引擎对于 VARCHAR 和 CHAR 格式的具体实现，有兴趣的小伙伴可以到该书中查看。 当然，这段话是给有经验的小伙伴看的，如果大家压根儿没听说过 server 层、存储引擎的概念，请自动忽略这段话，请自动忽略这段话，请自动忽略这段话！")])]),t._v(" "),e("h2",{attrs:{id:"常用的字段列类型-🔥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的字段列类型-🔥"}},[t._v("#")]),t._v(" 常用的字段列类型 🔥")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("身份证号")]),t._v("由于最后一位可能是 X，所以就归为"),e("strong",[t._v("字符串")]),t._v("了")])])])}),[],!1,null,null,null);v.default=a.exports}}]);