(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{704:function(t,e,s){"use strict";s.r(e);var n=s(11),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("ul",[s("li",[t._v("元素"),s("strong",[t._v("有序")]),t._v("（存储时按照底层数组索引添加，读取时和存储顺序一致）、"),s("strong",[t._v("可重复")]),t._v("、稳定（相对 hash 重排）。可通过"),s("strong",[t._v("索引")]),t._v("来访问指定元素。其实现类都重写了"),s("code",[t._v("toString()")]),t._v("方法。存储自定义对象时，需"),s("strong",[t._v("重写")]),t._v("其"),s("code",[t._v("equals()")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特有方法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("添加")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("void add([int index,]E e)")]),t._v("：当成单独元素")]),t._v(" "),s("li",[s("code",[t._v("void addAll([int index,] Collection c)")]),t._v("：当成整体，每个都是独立的")])])]),t._v(" "),s("li",[s("strong",[t._v("删除")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object remove(int index)")]),t._v("：返回被删除元素")]),t._v(" "),s("li",[s("code",[t._v("boolean remove(Object o)")]),t._v("：删除对象")])])]),t._v(" "),s("li",[s("strong",[t._v("修改替换")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object set(int index,E e)")]),t._v("：返回被替换掉的元素")])])]),t._v(" "),s("li",[s("strong",[t._v("获取")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object get(index)")])]),t._v(" "),s("li",[s("code",[t._v("int indexOf(Object o)")])]),t._v(" "),s("li",[s("code",[t._v("int lastIndexOf(Object o)")])]),t._v(" "),s("li",[s("code",[t._v("List subList(int fromIndex,int toIndex)")]),t._v("：返回新的 List，旧 List 不改变")])])]),t._v(" "),s("li",[t._v("长度：同 Collection\n"),s("ul",[s("li",[s("code",[t._v("int size()")])])])]),t._v(" "),s("li",[t._v("遍历：由于有索引，所以"),s("strong",[t._v("List 集合特有遍历功能")]),s("code",[t._v("get()")]),t._v("和"),s("code",[t._v("size()")]),t._v("结合的"),s("strong",[t._v("普通 for 循环")]),t._v("。还有"),s("strong",[t._v("迭代器")]),t._v("、"),s("strong",[t._v("foreach")]),t._v("。")])])])]),t._v(" "),s("h2",{attrs:{id:"arraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("底层是数组，查询快，增删慢")]),t._v("。"),s("strong",[t._v("不同步，线程不安全，效率高")])])]),t._v(" "),s("li",[s("p",[t._v("常用方法：没有特殊方法")])]),t._v(" "),s("li",[s("p",[t._v("源码分析（JDK7）")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("ArrayList list = new ArrayList()")]),t._v("，底层创建了长度是"),s("strong",[t._v("10")]),t._v("的"),s("code",[t._v("Object[]")]),t._v("数组"),s("code",[t._v("elementData")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("list.add(123)")]),t._v(" 即"),s("code",[t._v("elementData[0] = new Integer(123)")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("list.add(11)")]),t._v("，如果此次的添加导致底层"),s("code",[t._v("elementData")]),t._v("数组容量不够，则扩容。")])]),t._v(" "),s("li",[s("p",[t._v("默认情况下扩容为"),s("strong",[t._v("原来的容量的 1.5 倍")]),t._v("（原有容量+容量右移一位），同时需要将原有数组中的数据"),s("strong",[t._v("复制到新数组")]),t._v("中。")]),t._v(" "),s("p",[t._v("若扩容一次后还不够，则使用传入的容量（后续总结）")])])])]),t._v(" "),s("li",[s("p",[t._v("源码分析（JDK8）")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ArrayList list = new ArrayList()")]),t._v("，底层"),s("code",[t._v("Object[] elementData")]),t._v("初始化为"),s("code",[t._v("{}")]),t._v("，并没有创建长度为 10 的数组")]),t._v(" "),s("li",[s("code",[t._v("list.add(123)")]),t._v("，第一次调用"),s("code",[t._v("add()")]),t._v("时，底层才创建了长度 10 的数组，并将数据 123 添加到"),s("code",[t._v("elementData[0]")])]),t._v(" "),s("li",[t._v("后续的添加和扩容操作与 jdk 7 无异（但是注释没改！）")])])]),t._v(" "),s("li",[s("p",[t._v("小结：jdk7 中的"),s("code",[t._v("ArrayList")]),t._v("的对象的创建类似于"),s("strong",[t._v("单例的饿汉式")]),t._v("，而 jdk8 中的"),s("code",[t._v("ArrayList")]),t._v("的对象的创建类似于"),s("strong",[t._v("单例的懒汉式")]),t._v("，"),s("strong",[t._v("延迟了数组的创建，节省内存")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("建议开发中使用带参的构造器")]),t._v("："),s("code",[t._v("ArrayList list = new ArrayList(int capacity)")])])])]),t._v(" "),s("h2",{attrs:{id:"linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[t._v("#")]),t._v(" LinkedList")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("底层是双向链表，查询慢，增删快")]),t._v("。"),s("strong",[t._v("线程不安全，效率高")]),t._v("。重写了"),s("code",[t._v("toString()")]),t._v("方法")]),t._v(" "),s("li",[s("strong",[t._v("特有方法（操作首尾元素）")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("添加")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("void addFirst(E e)")]),t._v("=="),s("code",[t._v("void linkFirst(E e)")]),t._v("=="),s("code",[t._v("void push(E e)")]),t._v("（底层 "),s("code",[t._v("addFirst(E e)")]),t._v("）")]),t._v(" "),s("li",[s("code",[t._v("void addLast(E e)")]),t._v("=="),s("code",[t._v("void linkLast(E e)")])]),t._v(" "),s("li",[s("code",[t._v("boolean offer(E e)")]),t._v("：Adds the specified element as the tail (last element) of this list.底层"),s("code",[t._v("add(E e)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("boolean offerFirst(E e)")]),t._v("：Inserts the specified element at the front of this list.")]),t._v(" "),s("li",[s("code",[t._v("boolean offerLast(E e)")]),t._v("：Inserts the specified element at the end of this list.")])])])])]),t._v(" "),s("li",[s("strong",[t._v("删除")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object removeFirst()")]),t._v("=="),s("code",[t._v("pop(E e)")]),t._v("（底层"),s("code",[t._v("removeFirst()")]),t._v("）：NoSuchElementException if this list is empty")]),t._v(" "),s("li",[s("code",[t._v("Object removeLast()")])])])]),t._v(" "),s("li",[s("strong",[t._v("获取")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("E element()")]),t._v("：Retrieves, but does not remove, the head (first element) of this list.NoSuchElementException if this list is empty。底层"),s("code",[t._v("getFirst()")])]),t._v(" "),s("li",[s("code",[t._v("E peek()")]),t._v("：Retrieves, but does not remove, the head (first element) of this list.retrun null if this list is empty\n"),s("ul",[s("li",[s("code",[t._v("E peekFirst()")]),t._v("：etrieves, but does not remove, the first element of this list,or returns null if this list is empty.")]),t._v(" "),s("li",[s("code",[t._v("E peekLast()")]),t._v("：Retrieves, but does not remove, the last element of this list,or returns null if this list is empty.")])])]),t._v(" "),s("li",[s("code",[t._v("E poll()")]),t._v("：Retrieves and removes the head (first element) of this list.retrun null if this list is empty\n"),s("ul",[s("li",[s("code",[t._v("E pollFirst()")]),t._v("：Retrieves and removes the first element of this list, or returns null if this list is empty.")]),t._v(" "),s("li",[s("code",[t._v("E pollLast()")]),t._v("：Retrieves and removes the last element of this list, or returns null if this list is empty.")])])]),t._v(" "),s("li",[s("code",[t._v("E getFirst()")]),t._v("：NoSuchElementException if this list is empty")]),t._v(" "),s("li",[s("code",[t._v("E getLast()")])])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("源码分析（JDK8，与 7 没区别）")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("LinkedList list = new LinkedList()")]),t._v("，内部声明了"),s("code",[t._v("Node")]),t._v("内部类的"),s("code",[t._v("first")]),t._v("和"),s("code",[t._v("last")]),t._v("属性，默认值为"),s("code",[t._v("null")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("list.add(123)")]),t._v("，将 123 封装到 Node 中，创建了 Node 对象。")])]),t._v(" "),s("li",[s("p",[t._v("其中，"),s("code",[t._v("Node")]),t._v("定义为：体现了"),s("code",[t._v("LinkedList")]),t._v("的双向链表的说法")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])])])])])]),t._v(" "),s("h2",{attrs:{id:"vector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vector"}},[t._v("#")]),t._v(" Vector")]),t._v(" "),s("ul",[s("li",[t._v("源码分析：\n"),s("ul",[s("li",[t._v("jdk7 和 jdk8 中通过 Vector()构造器创建对象时，底层直接创建了长度为 10 的数组。")]),t._v(" "),s("li",[t._v("扩容时与 ArrayLIst 相比，默认变为原来的 2")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);